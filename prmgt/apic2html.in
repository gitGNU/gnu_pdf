#!@PATH_TO_AWK@ -f
# apic2wiki - API consistency report generator

# Copyright (C) 2008-2011 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Prologue & configuration
BEGIN {

    package_name = name

    html_title = "API Consistency report for " package_name
    if (url != "")
    {
        html_prolog = "<h1>" html_title "</h1>\n <a href=\"" url "\">Back to " package_name " Homepage</a><br/><br/>"
    }
    html_epilog = "<hr color=\"black\" size=\"2\"/> \
Copyright (c) 2008, 2011 Free Software Foundation, Inc."
    html_doctype = "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \
\"http://www.w3.org/TR/html401/loose.dtd\">"
    html_comment = "<!-- Generated by lignupdf's test2html at " systime() " -->"

    # Internal variables
    nfuncs = 0;
    nok = 0;
    nfail = 0;
    ntested = 0;
    nuntested = 0;
}

# Functions

function wiki_global_stats ()
{
    print "<h2>Summary</h2>"
    print ""
    print "<p>Report generated at: '''" strftime() "'''</p>"
    print ""
    print "<table class=\"resume_table\">"
    # Documented functions
    print "<tr>"
    print "<td class=\"cyclo_resume_header_entry\">Documented functions</td>"
    print "<td class=\"cyclo_resume_number_entry\">" nfuncs "</td>"
    print "</tr>"
    # Implemented functions
    print "<tr>"
    print "<td class=\"cyclo_resume_header_entry\">Implemented functions</td>"
    print "<td class=\"cyclo_resume_number_entry\">" nok "</td>"
    print "</tr>"
    # Not Implemented functions
    print "<tr>"
    print "<td class=\"cyclo_resume_header_entry\">Not implemented functions</td>"
    print "<td class=\"cyclo_resume_number_entry\">" nfail "</td>"
    print "</tr>"
    # Tested functions
    print "<tr>"
    print "<td class=\"cyclo_resume_header_entry\">Tested functions</td>"
    print "<td class=\"cyclo_resume_number_entry\">" ntested "</td>"
    print "</tr>"
    # Untested functions
    print "<tr>"
    print "<td class=\"cyclo_resume_header_entry\">Untested functions</td>"
    print "<td class=\"cyclo_resume_number_entry\">" nuntested "</td>"
    print "</tr>"
    print "</table>"
}

function wiki_function_data ()
{
    print "<h2>Details for all functions</h2>"

    print "<table width=\"90%\" class=\"cyclo_function_table\" cellpadding=\"0\" cellspacing=\"0\">"

    # Table header
    print "<tr class=\"function_table_header\">"
    print "<td class=\"cyclo_function_table_header_entry\">Function Name</td>"
    print "<td class=\"cyclo_function_table_header_entry\">Documented</td>"
    print "<td class=\"cyclo_function_table_header_entry\">Implemented</td>"
    print "<td class=\"cyclo_function_table_header_entry\">Unit tests</td>"
    print "</tr>"

    # Table data

    # Non-implemented functions
    for (nfnc = 1; nfnc < nfuncs; nfnc++)
    {
        if (fstatus[nfnc] == "failed")
        {
            print "<tr class=\"cyclo_function_entry_high\">"

            # Function name
            print "<td class=\"cyclo_function_entry_name\">" fnames[nfnc] "</td>"
            # Documented
            print "<td class=\"cyclo_function_entry_name\">yes</td>"
            # Implemented
            print "<td class=\"cyclo_function_entry_name\">"     \
                ((fstatus[nfnc] == "ok") ? "yes" : "no")         \
                "</td>"
            # Unit tests
            print "<td class=\"cyclo_function_entry_number\">0</td>"

            print "</tr>"
        }
    }

    # Implemented but non-tested functions
    for (nfnc = 1; nfnc < nfuncs; nfnc++)
    {
        if ((fstatus[nfnc] == "ok") && (fntests[nfnc] < 1))
        {
            print "<tr class=\"cyclo_function_entry_moderate\">"

            # Function name
            print "<td class=\"cyclo_function_entry_name\">" fnames[nfnc] "</td>"
            # Documented
            print "<td class=\"cyclo_function_entry_name\">yes</td>"
            # Implemented
            print "<td class=\"cyclo_function_entry_name\">yes</td>"
            # Unit tests
            print "<td class=\"cyclo_function_entry_number\">" fntests[nfnc] "</td>"

            print "</tr>"
        }
    }

    # Implemented and tested functions
    for (nfnc = 1; nfnc < nfuncs; nfnc++)
    {
        if ((fstatus[nfnc] == "ok") && (fntests[nfnc] > 0))
        {
            print "<tr class=\"cyclo_function_entry_simple\">"

            # Function name
            print "<td class=\"cyclo_function_entry_name\">" fnames[nfnc] "</td>"
            # Documented
            print "<td class=\"cyclo_function_entry_name\">yes</td>"
            # Implemented
            print "<td class=\"cyclo_function_entry_name\">yes</td>"
            # Unit tests
            print "<td class=\"cyclo_function_entry_number\">" fntests[nfnc] "</td>"

            print "</tr>"
        }
    }

    print "</table>"
}

# Process input data
{
    fname = $1;
    status = $3;
    ntests = $4;

    nfuncs++;
    if (status == "ok") 
    {
        nok++
    }
    if (status == "failed") 
    {
        nfail++
    }
    if (ntests > 0)
    {
        ntested++;
    }
    else
    {
        nuntested++;
    }

    fnames[nfuncs] = fname
    fstatus[nfuncs] = status
    fntests[nfuncs] = ntests
}


# Epilogue
END {
    # Print prolog
    print wiki_prolog

    # Print global stats
    wiki_global_stats()

    # Print function data
    wiki_function_data()

    # Print epilog
    print wiki_epilog
}

# Local Variables:
# mode: awk
# End:

# End of apic2wiki.in
