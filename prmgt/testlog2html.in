#!@PATH_TO_AWK@ -f
# testlog2wiki - Tests run report generator

# Copyright (C) 2008 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Prologue & configuration
BEGIN {
    # Wiki data
    wiki_prolog = "{{Note|This page has been automatically generated}}"
    wiki_epilog = ""

    # Internal variables
    suitename = ""
    numsuites = 0
    current_suite = 0
    numtests = 0
    numpassedtests = 0
    numfailingtests = 0
}

# Functions

function print_resume ()
{
    print "=Resume="
    print ""
    print "Report generated at: '''" strftime() "'''"
    print ""
    print "{| class=\"cyclo_resume_table\""
    # Tests executed
    print "|-"
    print "| class=\"cyclo_resume_header_entry\" | Tests executed"
    print "| class=\"cyclo_resume_number_entry\" |" numtests
    # Tests passed
    print "|-"
    print "| class=\"cyclo_resume_header_entry\" | Passing tests"
    print "| class=\"cyclo_resume_number_entry\" |" numpassedtests
    # Tests passed
    print "|-"
    print "| class=\"cyclo_resume_header_entry\" | Failing tests"
    print "| class=\"cyclo_resume_number_entry\" |" numfailingtests
    print "|}"
}

function print_passing_suites ()
{
    print "=Passing Tests="

    for (ntsuite = 1; ntsuite <= numsuites; ntsuite++)
    {
        if (suite_has_passing_tests[ntsuite] == "yes")
        {
            suite_name = suites[ntsuite]
            
            print "==Test Suite " suite_name "=="
            print_passing_suite_functions(suite_name)
        }
    }
}

function print_passing_suite_functions (sname)
{
    last_func = ""
    for (ntest = 1; ntest <= numtests; ntest++)
    {
        if (test_suite[ntest] == sname)
        {
            tf = test_func[ntest]
            if ((tf != last_func) &&
                (function_has_passing_tests[tf] == "yes"))
            {
                print ""
                print ""
                print "<center>'''" tf "'''</center>"
                print ""
                print "{| width=\"90%\" class=\"cyclo_function_table\" cellpadding=\"0\" cellspacing=\"0\">"
                # Table header
                print "|-"
                print "! class=\"cyclo_function_table_header_entry\" | Test Name"
                print "! class=\"cyclo_function_table_header_entry\" | File"
                print "! class=\"cyclo_function_table_header_entry\" | Line"
                print "! class=\"cyclo_function_table_header_entry\" | Result"
                print_passing_tcase(tf)
                print "|}"

                last_func = tf
            }
        }
    }
}

function print_passing_tcase (fname)
{
    for (nt = 1; nt <= numtests; nt++)
    {
        if (test_func[nt] == fname)
        {
            if (test_result[nt] == "P")
            {
                trclass="cyclo_function_entry_simple"

                print "|- class=\"" trclass "\""
                # Test Name
                print "| class=\"cyclo_function_entry_name\" |" test_name[nt]
                # Test File
                print "| class=\"cyclo_function_entry_filename\" |" test_file[nt]
                # Test Line
                print "| class=\"cyclo_function_entry_cyclo\" |" test_line[nt]
                # Test Result
                print "| class=\"cyclo_function_entry_cyclo\" |" test_result[nt]
            }
        }
    }
}

function print_failing_suites ()
{
    print "=Failing Tests="

    for (ntsuite = 1; ntsuite <= numsuites; ntsuite++)
    {
        if (suite_has_failing_tests[ntsuite])
        {
            suite_name = suites[ntsuite]
            
            print "==Test Suite " suite_name "=="
            print_failing_suite_functions(suite_name)
        }
    }
}

function print_failing_suite_functions (sname)
{
    last_func = ""
    for (ntest = 1; ntest <= numtests; ntest++)
    {
        if (test_suite[ntest] == sname)
        {
            tf = test_func[ntest]
            if ((tf != last_func) &&
                (function_has_failing_tests[tf] == "yes"))
            {
                print ""
                print ""
                print "<center>'''" tf "'''</center>"
                print ""
                print "{| width=\"90%\" class=\"cyclo_function_table\" cellpadding=\"0\" cellspacing=\"0\">"
                # Table header
                print "|-"
                print "! class=\"cyclo_function_table_header_entry\" | Test Name"
                print "! class=\"cyclo_function_table_header_entry\" | File"
                print "! class=\"cyclo_function_table_header_entry\" | Line"
                print "! class=\"cyclo_function_table_header_entry\" | Result"
                print "! class=\"cyclo_function_table_header_entry\" | Fail Cause"
                print_failing_tcase(tf)
                print "|}"

                last_func = tf
            }
        }
    }
}

function print_failing_tcase (fname)
{
    for (nt = 1; nt <= numtests; nt++)
    {
        if (test_func[nt] == fname)
        {
            if (test_result[nt] == "F")
            {
                trclass="cyclo_function_entry_high"
                
                print "|- class=\"" trclass "\""
                # Test Name
                print "| class=\"cyclo_function_entry_name\" |" test_name[nt]
                # Test File
                print "| class=\"cyclo_function_entry_filename\" |" test_file[nt]
                # Test Line
                print "| class=\"cyclo_function_entry_cyclo\" |" test_line[nt]
                # Test Result
                print "| class=\"cyclo_function_entry_cyclo\" |" test_result[nt]
                # Fail Cause
                print "| class=\"cyclo_function_entry_name\" |" test_failreason[nt]
            }
        }
    }
}


# Process input data

/^Running suite.+$/ {
    # Start of suite
    numsuites++
    current_suite = numsuites
    suites[numsuites] = $3
}

/^[^:]+:[^:]+:[^:]+:[^:]+:[^:]+:[^:]+:[^:]+$/ {
    # Test
    numtests++

    # Get information from the line
    split ($0, line_data, ":")
    file = line_data[1]
    line = line_data[2]
    result = line_data[3]
    tfunc = line_data[4]
    name = line_data[5]
    ext_result = line_data[7]

    test_suite[numtests] = suites[current_suite]
    test_file[numtests] = file
    test_line[numtests] = line
    test_result[numtests] = result
    test_func[numtests] = tfunc
    test_name[numtests] = name

    if (result == "P")
    {
        numpassedtests++
        test_failreason[numtests] = ""
        suite_has_passing_tests[current_suite] = "yes"
        function_has_passing_tests[tfunc] = "yes"
    }
    if (result == "F")
    {
        numfailingtests++
        test_failreason[numtests] = ext_result
        suite_has_failing_tests[current_suite] = "yes"
        function_has_failing_tests[tfunc] = "yes"
    }
}

# Epilogue
END {
    # Print prolog
    print wiki_prolog

    # Print test execution resume
    print_resume()

    # Print detailed information
    if (numfailingtests > 0)
    {
        print_failing_suites()
    }
    if (numpassedtests > 0)
    {
        print_passing_suites()
    }

    # Print epilog
    print wiki_epilog
}

# Local Variables:
# mode: awk
# End:

# End of testlog2wiki
