#!@PATH_TO_AWK@ -f
# testlog2html - Tests run report generator

# Copyright (C) 2008-2011 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# The variables available are:
#   name     project name
#   url      link to project's home page
#   css      CSS stylesheet filename, included verbatim in HTML output
#   css_url  link to CSS stylesheet, an URL

# Prologue & configuration
BEGIN {

    package_name = name

    html_title = "Unit Tests Execution report for " package_name
    if (url != "")
    {
        html_prolog = "<h1>" html_title "</h1>\n <a href=\"" url "\">Back to " package_name " Homepage</a><br/><br/>"
    }
    html_epilog = "<hr color=\"black\" size=\"2\"/> \
Copyright (c) 2008, 2011 Free Software Foundation, Inc."
    html_doctype = "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \
\"http://www.w3.org/TR/html401/loose.dtd\">"
    html_comment = "<!-- Generated by lignupdf's test2html at " systime() " -->"

    # Internal variables
    suitename = ""
    numsuites = 0
    current_suite = 0
    numtests = 0
    numpassedtests = 0
    numfailingtests = 0
}

# Functions

function html_header ()
{
    print html_doctype
    print "<html>"
    print html_comment
    print "<head>"
    print "<title>" html_title "</title>"
    print ""
    print "<meta name=\"description\" content=\"" html_title "\">"
    print "<meta name=\"keywords\" content=\"" html_title "\">"
    print "<meta name=\"resource-type\" content=\"document\">"
    print "<meta name=\"distribution\" content=\"global\">"
    print "<meta name=\"Generator\" content=\"pmccabe2html\">"
    print "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">"

    if (css_url != "")
    {
        print "<link rel=\"stylesheet\" href=\"" css_url "\" type =\"text/css\" media=\"screen\"/>"
    }
    if (css != "")
    {
        print "<style type =\"text/css\" media=\"screen\">"
	print "<!--"
        while ((getline cssline < css) > 0)
        {
	    print cssline
	}
        print "-->"
	print "</style />"
	close(css)
    }
    print "</head>"
    print "<body lang=\"en\" bgcolor=\"#FFFFFF\" text=\"#000000\" link=\"#0000FF\" \
vlink=\"#800080\" alink=\"#FF0000\">"

}

function print_resume ()
{
    print "<h2>Summary</h2>"
    print ""
    print "<p>Report generated at: '''" strftime() "'''</p>"
    print ""
    print "<table class=\"resume_table\">"
    # Tests executed
    print "<tr>"
    print "<td class=\"resume_header_entry\">"
    print "Tests executed"
    print "</td>"
    print "<td class=\"resume_number_entry\">"
    print numtests
    print "</td>"
    print "</tr>"
    # Tests passed
    print "<tr>"
    print "<td class=\"resume_header_entry\">"
    print "Passing tests"
    print "</td>"
    print "<td class=\"resume_number_entry\">"
    print numpassedtests
    print "</td>"
    print "</tr>"
    # Tests passed
    print "<tr>"
    print "<td class=\"resume_header_entry\">"
    print "Failing tests"
    print "</td>"
    print "<td class=\"resume_number_entry\">"
    print numfailingtests
    print "</td>"
    print "</tr>"

    print "</table>"
}

function print_passing_suites ()
{
    print "<h2>Passing Tests</h2>"

    for (ntsuite = 1; ntsuite <= numsuites; ntsuite++)
    {
        if (suite_has_passing_tests[ntsuite] == "yes")
        {
            suite_name = suites[ntsuite]
            
            print "<h3>Test Suite " suite_name "</h3>"
            print_passing_suite_functions(suite_name)
        }
    }
}

function print_passing_suite_functions (sname)
{
    last_func = ""
    for (ntest = 1; ntest <= numtests; ntest++)
    {
        if (test_suite[ntest] == sname)
        {
            tf = test_func[ntest]
            if ((tf != last_func) &&
                (function_has_passing_tests[tf] == "yes"))
            {
                print ""
                print ""
                print "<h4>" tf "</h4>"
                print ""
                print "<table width=\"90%\" class=\"function_table\" cellpadding=\"0\" cellspacing=\"0\">"
                # Table header
                print "<tr class=\"function_table_header\">"
                print "<td class=\"function_table_header_entry\">"
                print "Test Name"
                print "</td>"
                print "<td class=\"function_table_header_entry\">"
                print "File"
                print "</td>"
                print "<td class=\"function_table_header_entry\">"
                print "Line"
                print "</td>"
                print "<td class=\"function_table_header_entry\">"
                print "Result"
                print "</td>"
                print "</tr>"
                print_passing_tcase(tf)
                print "</table>"

                last_func = tf
            }
        }
    }
}

function print_passing_tcase (fname)
{
    for (nt = 1; nt <= numtests; nt++)
    {
        if (test_func[nt] == fname)
        {
            if (test_result[nt] == "P")
            {
                print "<tr class=\"function_entry_simple\">"

                # Test Name
                print "<td class=\"function_entry_name\">"
                print test_name[nt]
                print "</td>"
                # Test File
                print "<td class=\"function_entry_filename\">"
                print test_file[nt]
                print "</td>"
                # Test Line
                print "<td class=\"function_entry_cyclo\">"
                print test_line[nt]
                print "</td>"
                # Test Result
                print "<td class=\"function_entry_cyclo\">"
                print test_result[nt]
                print "</td>"

                print "</tr>"
            }
        }
    }
}

function print_failing_suites ()
{
    print "<h2>Failing Tests</h2>"

    for (ntsuite = 1; ntsuite <= numsuites; ntsuite++)
    {
        if (suite_has_failing_tests[ntsuite])
        {
            suite_name = suites[ntsuite]
            
            print "<h3>Test Suite " suite_name "</h3>"
            print_failing_suite_functions(suite_name)
        }
    }
}

function print_failing_suite_functions (sname)
{
    last_func = ""
    for (ntest = 1; ntest <= numtests; ntest++)
    {
        if (test_suite[ntest] == sname)
        {
            tf = test_func[ntest]
            if ((tf != last_func) &&
                (function_has_failing_tests[tf] == "yes"))
            {
                print ""
                print ""
                print "<h4>" tf "</h4>"
                print ""
                print "<table width=\"90%\" class=\"function_table\" cellpadding=\"0\" cellspacing=\"0\">"
                # Table header
                print "<tr class=\"function_table_header\">"
                print "<td class=\"function_table_header_entry\">"
                print "Test Name"
                print "</td>"
                print "<td class=\"function_table_header_entry\">"
                print "File"
                print "</td>"
                print "<td class=\"function_table_header_entry\">"
                print "Line"
                print "</td>"
                print "<td class=\"function_table_header_entry\">"
                print "Result"
                print "</td>"
                print "<td class=\"function_table_header_entry\">"
                print "Fail Cause"
                print "</td>"
                print "</tr>"
                # Entries for failing tests.
                print_failing_tcase(tf)
                print "</table>"

                last_func = tf
            }
        }
    }
}

function print_failing_tcase (fname)
{
    for (nt = 1; nt <= numtests; nt++)
    {
        if (test_func[nt] == fname)
        {
            if (test_result[nt] == "F")
            {
                print "<tr class=\"function_entry_high\">"
                # Test Name
                print "<td class=\"function_entry_name\">"
                print test_name[nt]
                print "</td>"
                # Test File
                print "<td class=\"function_entry_filename\">"
                print test_file[nt]
                print "</td>"
                # Test Line
                print "<td class=\"function_entry_cyclo\">"
                print test_line[nt]
                print "</td>"
                # Test Result
                print "<td class=\"function_entry_cyclo\">"
                print test_result[nt]
                print "</td>"
                # Fail Cause
                print "<td class=\"function_entry_name\">"
                print test_failreason[nt]
                print "</td>"

                print "</tr>"
            }
        }
    }
}


# Process input data

/^Running suite.+$/ {
    # Start of suite
    numsuites++
    current_suite = numsuites
    suites[numsuites] = $3
}

/^[^:]+:[^:]+:[^:]+:[^:]+:[^:]+:[^:]+:[^:]+$/ {
    # Test
    numtests++

    # Get information from the line
    split ($0, line_data, ":")
    file = line_data[1]
    line = line_data[2]
    result = line_data[3]
    tfunc = line_data[4]
    name = line_data[5]
    ext_result = line_data[7]

    test_suite[numtests] = suites[current_suite]
    test_file[numtests] = file
    test_line[numtests] = line
    test_result[numtests] = result
    test_func[numtests] = tfunc
    test_name[numtests] = name

    if (result == "P")
    {
        numpassedtests++
        test_failreason[numtests] = ""
        suite_has_passing_tests[current_suite] = "yes"
        function_has_passing_tests[tfunc] = "yes"
    }
    if (result == "F")
    {
        numfailingtests++
        test_failreason[numtests] = ext_result
        suite_has_failing_tests[current_suite] = "yes"
        function_has_failing_tests[tfunc] = "yes"
    }
}

# Epilogue
END {
    # Print header
    html_header()

    # Print prolog
    print html_prolog

    # Print test execution resume
    print_resume()

    # Print detailed information
    if (numfailingtests > 0)
    {
        print_failing_suites()
    }
    if (numpassedtests > 0)
    {
        print_passing_suites()
    }

    # Print epilog
    print html_epilog
}

# Local Variables:
# mode: awk
# End:

# End of testlog2html
