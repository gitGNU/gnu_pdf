#!@PATH_TO_AWK@ -f
# testlog2wiki - Tests run report generator

# Copyright (C) 2008 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Prologue & configuration
BEGIN {
    # Wiki data
    wiki_prolog = "{{Note|This page has been automatically generated}}\n__NOTOC__"
    wiki_epilog = ""

    # Internal variables
    suitename = ""
    numsuites = 0
    current_suite = 0
    numtests = 0
    numpassedtests = 0
    numfailingtests = 0
}

# Functions

function print_resume ()
{
    print "==Execution Resume=="
    print ""
    
    print "{| class=\"cyclo_resume_table\""
    # Tests executed
    print "|-"
    print "| class=\"cyclo_resume_header_entry\" | Tests executed"
    print "| class=\"cyclo_resume_number_entry\" |" numtests
    # Tests passed
    print "|-"
    print "| class=\"cyclo_resume_header_entry\" | Passing tests"
    print "| class=\"cyclo_resume_number_entry\" |" numpassedtests
    # Tests passed
    print "|-"
    print "| class=\"cyclo_resume_header_entry\" | Failing tests"
    print "| class=\"cyclo_resume_number_entry\" |" numfailingtests
    print "|}"
}

function print_suites ()
{
    print "==Test Execution Details=="

    for (ntsuite = 1; ntsuite <= numsuites; ntsuite++)
    {
        suite_name = suites[ntsuite]

        print "===Test Suite " suite_name "==="
        print_suite_functions(suite_name)
    }
}

function print_suite_functions (sname)
{
    for (ntest = 1; ntest <= numtests; ntest++)
    {
        if (test_suite[ntest] == sname)
        {
            if (!(test_func[ntest] in aux_func))
            {
                print "====Function " test_func[ntest] "===="
                print "{| width=\"90%\" class=\"cyclo_function_table\" cellpadding=\"0\" cellspacing=\"0\">"
                # Table header
                print "! class=\"cyclo_function_table_header_entry\" | Test Name"
                print "! class=\"cyclo_function_table_header_entry\" | File"
                print "! class=\"cyclo_function_table_header_entry\" | Line"
                print "! class=\"cyclo_function_table_header_entry\" | Result"
                print_tcase(test_func[ntest])
                print "|}"
            }

            aux_func[test_func[ntest]] = 1
        }
    }
}

function print_tcase (fname)
{
    for (ntest = 1; ntest <= numtests; ntest++)
    {
        if (test_func[ntest] == fname)
        {
            if (test_result[ntest] == "P")
            {
                trclass="cyclo_function_entry_simple"
            }
            if (test_result[ntest] == "F")
            {
                trclass="cyclo_function_entry_high"
            }

            print "|- class=\"" trclass "\""
            # Test Name
            print "| class=\"cyclo_function_entry_name\" |" test_name[ntest]
            # Test File
            print "| class=\"cyclo_function_entry_filename\" |" test_file[ntest]
            # Test Line
            print "| class=\"cyclo_function_entry_cyclo\" |" test_line[ntest]
            # Test Result
            print "| class=\"cyclo_function_entry_cyclo\" |" test_result[ntest]
        }
    }

}

# Process input data

/^Running suite.+$/ {
    # Start of suite
    numsuites++
    current_suite = numsuites
    suites[numsuites] = $3
}

/^[^:]+:[^:]+:[^:]+:[^:]+:[^:]+:[^:]+:[^:]+$/ {
    # Test
    numtests++

    # Get information from the line
    split ($0, line_data, ":")
    file = line_data[1]
    line = line_data[2]
    result = line_data[3]
    tfunc = line_data[4]
    name = line_data[5]

    test_suite[numtests] = suites[current_suite]
    test_file[numtests] = file
    test_line[numtests] = line
    test_result[numtests] = result
    test_func[numtests] = tfunc
    test_name[numtests] = name

    if (result == "P")
    {
        numpassedtests++
    }
    if (result == "F")
    {
        numfailingtests++
    }
}

# Epilogue
END {
    # Print prolog
    print wiki_prolog

    # Title and date
    print "=libgnupdf Unit Testing Report="
    print "Report generated at: '''" strftime() "'''"

    # Print test execution resume
    print_resume()

    # Print detailed information
    print_suites()

    # Print epilog
    print wiki_epilog
}

# Local Variables:
# mode: awk
# End:

# End of testlog2wiki
