\input texinfo
@comment $Id: gnupdf-tsd.texi,v 1.13 2008/06/24 14:13:30 danividal Exp $
@comment %**start of header
@setfilename gnupdf-tsd.info
@settitle GNU PDF Library Test Specification Document
@comment %**end of header

@set VERSION 0.1

@copying
This is the @cite{GNU PDF Library Test Specification Document},
updated for @strong{libgnupdf} version @strong{@value{VERSION}}.

Copyright @copyright{} 2007, 2008 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A
copy of the license is included in the section entitled ``GNU Free
Documentation License''.
@end quotation
@end copying

@titlepage
@sp 6
@center @titlefont{GNU PDF Library Test Specification Document}
@sp 4
@center Updated for version @value{VERSION}.
@sp 5
@page Free Software Foundation
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top GNU PDF Library Test Specification Document

GNU PDF Library Test Specification Document

@insertcopying
@end ifnottex

@menu
* Unit Testing::
* Subsystem Testing::
* System Testing::
* GNU Free Documentation License:: Distribution terms of this document.

Indices

* Function index::
@end menu

@node Unit Testing
@chapter Unit Testing

@menu
* Base Layer Modules::
@end menu

@node Base Layer Modules
@section Base Layer Modules

@menu
* Memory Allocation Module::
* Filesystem Module::
* Stream Module::
* Text Module::
* List Module::
* Hash Module::
* Error Module::
* Types Module::
* Crypt Module::
@end menu

@node Memory Allocation Module
@subsection Memory Allocation Module

@menu
* pdf_alloc::
* pdf_realloc::
* pdf_dealloc::
@end menu

@node pdf_alloc
@subsubsection pdf_alloc

@deffn Test pdf_alloc_001
Allocate some bytes.
@table @strong
@item Success condition
The call should not produce an error.
@end table
@end deffn

@node pdf_realloc
@subsubsection pdf_realloc

@deffn Test pdf_realloc_001
Get more memory.
@table @strong
@item Success condition
@itemize @bullet
@item The call should not produce an error.
@item The previous contents of the buffer should still be there.
@end itemize
@end table
@end deffn

@deffn Test pdf_realloc_002
Reduce the size of a memory buffer.
@table @strong
@item Success condition
@itemize @bullet
@item The call should not produce an error.
@item The truncated previous contents of the buffer should still be there.
@end itemize
@end table
@end deffn

@node pdf_dealloc
@subsubsection pdf_dealloc

@deffn Test pdf_dealloc_001
Deallocate memory.
@table @strong
@item Success condition
The call should not produce an error.
@end table
@end deffn

@node Filesystem Module
@subsection Filesystem Module

@menu
* pdf_fsys_open::
@end menu

@node pdf_fsys_open
@subsubsection pdf_fsys_open

@deffn Test pdf_fsys_open_001
Open an existent and readable file for reading.
@table @strong
@item Success condition
@code{pdf_fsys_open} should return @code{PDF_OK}.
@end table
@end deffn

@deffn Test pdf_fsys_open_002
Open a non-existent and writable file for writing.
@table @strong
@item Success condition
@code{pdf_fsys_open} should return @code{PDF_OK}.
@end table
@end deffn

@deffn Test pdf_fsys_open_003
Open an existing and writable file for writing.
@table @strong
@item Success condition
@code{pdf_fsys_open} should return @code{PDF_OK}.
@end table
@end deffn

@deffn Test pdf_fsys_open_004
Open an existing, readable and writable file for reading and writing.
@table @strong
@item Success condition
@code{pdf_fsys_open} should return @code{PDF_OK}.
@end table
@end deffn


@node Stream Module
@subsection Stream Module

@menu
* pdf_stm_mem_new::
* pdf_stm_read::
@end menu

@node pdf_stm_mem_new
@subsubsection pdf_stm_mem_new

@deffn Test pdf_stm_mem_new_001
Create a new memory-based reading stream.
@table @strong
@item Success condition
@code{pdf_stm_mem_new} should return a @code{PDF_OK}.
@end table
@end deffn

@node pdf_stm_read
@subsubsection pdf_stm_read

@deffn Test pdf_stm_read_001
Read some bytes from a reading memory stream.
@table @strong
@item Success condition
The readed data should be consistent.
@end table
@end deffn

@deffn Test pdf_stm_read_002
Read bytes from a reading memory stream getting and EOF condition in
the returned value.
@table @strong
@item Success condition
The readed data should be consistent and we should get
and EOF condition in the returned value.
@end table
@end deffn

@deffn Test pdf_stm_read_003
Read bytes from a reading memory stream in several steps.
@table @strong
@item Success condition
The readed data should be consistent.
@end table
@end deffn

@deffn Test pdf_stm_read_004
Read some bytes from a reading memory cache with
two null filters installed.
@table @strong
@item Success condition
The readed data should be consistent.
@end table
@end deffn

@node Text Module
@subsection Text Module

@menu
* pdf_text_init::
* pdf_text_new_destroy::
* pdf_text_dup::
* pdf_text_new_from_host::
* pdf_text_new_from_pdf_string::
* pdf_text_new_from_unicode::
* pdf_text_new_from_u32::
* pdf_text_get_country::
* pdf_text_get_language::
* pdf_text_set_country::
* pdf_text_set_language::
* pdf_text_empty_p::
* pdf_text_get_host_encoding::
* pdf_text_check_host_encoding::
* pdf_text_get_best_encoding::
* pdf_text_get_host::
* pdf_text_get_pdfdocenc::
* pdf_text_get_unicode::
* pdf_text_get_hex::
* pdf_text_set_host::
* pdf_text_set_pdfdocenc::
* pdf_text_set_unicode::
* pdf_text_concat::
* pdf_text_replace::
* pdf_text_replace_ascii::
* pdf_text_filter::
* pdf_text_cmp::


@end menu

@node pdf_text_init
@subsubsection pdf_text_init

@deffn Test pdf_text_init_001
Initialize text module
@table @strong
@item Success conditions
1. The call should not produce an error.

2. A valid (non-empty) host encoding should be detected.

3. A valid host endianness should be detected (either LE or BE).

4. A valid (non-empty) host EOL marker should be detected.

5. A valid (non-empty) language ID should be detected.
@end table
@end deffn


@node pdf_text_new_destroy
@subsubsection pdf_text_new_destroy

@deffn Test pdf_text_new_destroy_001
Create an empty text object and destroy it
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new} should not return a  @code{NULL} pointer.

2. The text data of the created object should be empty.

3. The language code of the output object should be empty

4. The country code of the output object should be empty

5. The call to @code{pdf_text_destroy} should return PDF_OK;
@end table
@end deffn


@node pdf_text_dup
@subsubsection pdf_text_dup

@deffn Test pdf_text_dup_001
Duplicate an empty text object
@table @strong
@item Success conditions
1. The call to @code{pdf_text_dup} should not return a  @code{NULL} pointer.

2. The text data of the created object should be empty.

3. The language code of the output object should be empty

4. The country code of the output object should be empty

@end table
@end deffn

@deffn Test pdf_text_dup_002
Duplicate a text object with data contents but no language/country code
@table @strong
@item Success conditions
1. The call to @code{pdf_text_dup} should not return a  @code{NULL} pointer.

2. The text data of the output object should be equal to the text data of the input object.

3. The language code of the output object should be empty

4. The country code of the output object should be empty

@end table
@end deffn

@deffn Test pdf_text_dup_003
Duplicate a text object with data contents and language code
@table @strong
@item Success conditions
1. The call to @code{pdf_text_dup} should not return a  @code{NULL} pointer.

2. The text data of the output object should be equal to the text data of the input object.

3. The language code of the output object should be equal to the language code of the input object.

4. The country code of the output object should be empty.

@end table
@end deffn

@deffn Test pdf_text_dup_004
Duplicate a text object with data contents, language code and country code
@table @strong
@item Success conditions
1. The call to @code{pdf_text_dup} should not return a  @code{NULL} pointer.

2. The text data of the output object should be equal to the text data of the input object.

3. The language code of the output object should be equal to the language code of the input object.

4. The country code of the output object should be equal to the country code of the input object.

@end table
@end deffn


@node pdf_text_new_from_host
@subsubsection pdf_text_new_from_host

@deffn Test pdf_text_new_from_host_001
Create a text object with an input valid host-encoded string
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_new_from_host} should return PDF_OK.

2. The contents of the text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_new_from_host_002
Create a text object with an input invalid host-encoded string
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_new_from_host} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_new_from_host_003
Create a text object with an input string encoded in an invalid host encoding
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_new_from_host} should NOT return PDF_OK.
@end table
@end deffn


@node pdf_text_new_from_pdf_string
@subsubsection pdf_text_new_from_pdf_string

@deffn Test pdf_text_new_from_pdf_string_001
Create a text object with an input valid PDF-Doc-Encoded string
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_pdf_string} should return PDF_OK.

2. The contents of the text object must be the expected ones.

3. The language code within the text object must be empty.

4. The country code within the text object must be empty.

5. The call should return a NULL @code{remaining_str} pointer and a zero @code{remaining_length}
@end table
@end deffn

@deffn Test pdf_text_new_from_pdf_string_002
Create a text object with an input invalid PDF-Doc-Encoded string
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_pdf_string} should NOT return PDF_OK.

2. Pointer to the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_new_from_pdf_string_003
Create a text object with an input valid UTF-16BE encoded string with BOM (containing both 16-bit and 32-bit UTF-16 code points!) and without lang/country information.
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_pdf_string} should return PDF_OK.

2. The function should return a valid pointer to the new text object.

3. The contents of the text object must be the expected ones.

4. The language code within the text object must be empty.

5. The country code within the text object must be empty.

5. The call should return a NULL @code{remaining_str} pointer and a zero @code{remaining_length}
@end table
@end deffn

@deffn Test pdf_text_new_from_pdf_string_004
Create a text object with an input valid UTF-16BE encoded string without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_pdf_string} should NOT return PDF_OK.

2. Pointer to the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_new_from_pdf_string_005
Create a text object with an input invalid UTF-16BE encoded string with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_pdf_string} should NOT return PDF_OK.

2. Pointer to the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_new_from_pdf_string_006
Create a text object with an input valid UTF-16BE encoded string with BOM (containing both 16-bit and 32-bit UTF-16 code points!) which also contains a valid language code embedded.
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_pdf_string} should return PDF_OK.

2. The function should return a valid pointer to the new text object

3. The contents of the text object must be the expected ones.

4. The languange code within the text object must be the expected one.

5. The country code within the text object must be empty.

6. The call should return a NULL @code{remaining_str} pointer and a zero @code{remaining_length}
@end table
@end deffn

@deffn Test pdf_text_new_from_pdf_string_007
Create a text object with an input valid UTF-16BE encoded string with BOM (containing both 16-bit and 32-bit UTF-16 code points!) which also contains a valid language code and a valid country code embedded.
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_pdf_string} should return PDF_OK.

2. The function should return a valid pointer to the new text object

3. The contents of the text object must be the expected ones.

4. The languange code within the text object must be the expected one.

5. The country code within the text object must be the expected one.

6. The call should return a NULL @code{remaining_str} pointer and a zero @code{remaining_length}
@end table
@end deffn

@deffn Test pdf_text_new_from_pdf_string_008
Create a text object with an input valid UTF-16BE encoded string with BOM (containing both 16-bit and 32-bit UTF-16 code points!) which also contains more than one (three) valid language code embedded (the string contains more than one string in more than one different language).
@table @strong
@item Success conditions
1. The first call to @code{pdf_text_new_from_pdf_string} should return PDF_OK.

2. The first call should return a valid pointer to the new text object

3. The contents of the first text object must be the expected ones.

4. The languange code within the first text object must be the expected one.

5. The country code within the first text object must be empty.

6. The first call should return a valid @code{remaining_str} pointer and a non-zero @code{remaining_length}

7. The second call to @code{pdf_text_new_from_pdf_string} should return PDF_OK.

8. The second call should return a valid pointer to the new text object

9. The contents of the second text object must be the expected ones.

10. The languange code within the second text object must be the expected one.

11. The country code within the second text object must be empty.

12. The second call should return a valid @code{remaining_str} pointer and a non-zero @code{remaining_length}

13. The third call to @code{pdf_text_new_from_pdf_string} should return PDF_OK.

14. The third call should return a valid pointer to the new text object

15. The contents of the third text object must be the expected ones.

16. The languange code within the third text object must be the expected one.

17. The country code within the third text object must be empty.

18. The second call should return a NULL @code{remaining_str} pointer and a zero @code{remaining_length}
@end table
@end deffn

@deffn Test pdf_text_new_from_pdf_string_009
Create a text object with an input valid UTF-16BE encoded string with BOM (containing both 16-bit and 32-bit UTF-16 code points!) which also contains more than one (three) valid language code and a valid country code embedded (the string contains more than one string in more than one different language/country).
@table @strong
@item Success conditions
1. The first call to @code{pdf_text_new_from_pdf_string} should return PDF_OK.

2. The first call should return a valid pointer to the new text object

3. The contents of the first text object must be the expected ones.

4. The languange code within the first text object must be the expected one.

5. The country code within the first text object must be the expected one.

6. The first call should return a valid @code{remaining_str} pointer and a non-zero @code{remaining_length}

7. The second call to @code{pdf_text_new_from_pdf_string} should return PDF_OK.

8. The second call should return a valid pointer to the new text object

9. The contents of the second text object must be the expected ones.

10. The languange code within the second text object must be the expected one.

11. The country code within the second text object must be the expected one.

12. The second call should return a valid @code{remaining_str} pointer and a non-zero @code{remaining_length}

13. The third call to @code{pdf_text_new_from_pdf_string} should return PDF_OK.

14. The third call should return a valid pointer to the new text object

15. The contents of the third text object must be the expected ones.

16. The languange code within the third text object must be the expected one.

17. The country code within the third text object must be the expected one.

18. The second call should return a NULL @code{remaining_str} pointer and a zero @code{remaining_length}
@end table
@end deffn


@node pdf_text_new_from_unicode
@subsubsection pdf_text_new_from_unicode

@deffn Test pdf_text_new_from_unicode_001
Create a text object with an input valid UTF-8 encoded string (containing 8-bit, 16-bit, 24-bit and 32-bit code points!) without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should return PDF_OK.

2. The function should return a valid pointer to the new text object

3. The contents of the text object must be the expected ones (without BOM).

4. The language code within the text object must be empty.

5. The country code within the text object must be empty.
@end table
@end deffn

@deffn Test pdf_text_new_from_unicode_002
Create a text object with an input valid UTF-16BE encoded string (16-bit and 32-bit code points!) without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should return PDF_OK.

2. The function should return a valid pointer to the new text object

3. The contents of the text object must be the expected ones (without BOM).

4. The language code within the text object must be empty.

5. The country code within the text object must be empty.
@end table
@end deffn

@deffn Test pdf_text_new_from_unicode_003
Create a text object with an input valid UTF-16LE encoded string (16-bit and 32-bit code points!) without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should return PDF_OK.

2. The function should return a valid pointer to the new text object

3. The contents of the text object must be the expected ones (without BOM).

4. The language code within the text object must be empty.

5. The country code within the text object must be empty.
@end table
@end deffn

@deffn Test pdf_text_new_from_unicode_004
Create a text object with an input valid UTF-16HE encoded string (16-bit and 32-bit code points!) without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should return PDF_OK.

2. The function should return a valid pointer to the new text object

3. The contents of the text object must be the expected ones (without BOM).

4. The language code within the text object must be empty.

5. The country code within the text object must be empty.
@end table
@end deffn

@deffn Test pdf_text_new_from_unicode_005
Create a text object with an input valid UTF-32BE encoded string without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should return PDF_OK.

2. The function should return a valid pointer to the new text object

3. The contents of the text object must be the expected ones (without BOM).

4. The language code within the text object must be empty.

5. The country code within the text object must be empty.
@end table
@end deffn

@deffn Test pdf_text_new_from_unicode_006
Create a text object with an input valid UTF-32LE encoded string without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should return PDF_OK.

2. The function should return a valid pointer to the new text object

3. The contents of the text object must be the expected ones (without BOM).

4. The language code within the text object must be empty.

5. The country code within the text object must be empty.
@end table
@end deffn

@deffn Test pdf_text_new_from_unicode_007
Create a text object with an input valid UTF-32HE encoded string without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should return PDF_OK.

2. The function should return a valid pointer to the new text object

3. The contents of the object must be completely equal to the input data

4. The language code within the text object must be empty.

5. The country code within the text object must be empty.
@end table
@end deffn

@deffn Test pdf_text_new_from_unicode_008
Create a text object with an input valid UTF-8 encoded string (containing 8-bit, 16-bit, 24-bit and 32-bit code points!) with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should return PDF_OK.

2. The function should return a valid pointer to the new text object

3. The contents of the text object must be the expected ones (without BOM).

4. The language code within the text object must be empty.

5. The country code within the text object must be empty.
@end table
@end deffn

@deffn Test pdf_text_new_from_unicode_009
Create a text object with an input valid UTF-16BE encoded string (16-bit and 32-bit code points!) with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should return PDF_OK.

2. The function should return a valid pointer to the new text object

3. The contents of the text object must be the expected ones (without BOM).

4. The language code within the text object must be empty.

5. The country code within the text object must be empty.
@end table
@end deffn

@deffn Test pdf_text_new_from_unicode_010
Create a text object with an input valid UTF-16LE encoded string (16-bit and 32-bit code points!) with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should return PDF_OK.

2. The function should return a valid pointer to the new text object

3. The contents of the text object must be the expected ones (without BOM).

4. The language code within the text object must be empty.

5. The country code within the text object must be empty.
@end table
@end deffn

@deffn Test pdf_text_new_from_unicode_011
Create a text object with an input valid UTF-16HE encoded string (16-bit and 32-bit code points!) with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should return PDF_OK.

2. The function should return a valid pointer to the new text object

3. The contents of the text object must be the expected ones (without BOM).

4. The language code within the text object must be empty.

5. The country code within the text object must be empty.
@end table
@end deffn

@deffn Test pdf_text_new_from_unicode_012
Create a text object with an input valid UTF-32BE encoded string with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should return PDF_OK.

2. The function should return a valid pointer to the new text object

3. The contents of the text object must be the expected ones (without BOM).

4. The language code within the text object must be empty.

5. The country code within the text object must be empty.
@end table
@end deffn

@deffn Test pdf_text_new_from_unicode_013
Create a text object with an input valid UTF-32LE encoded string with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should return PDF_OK.

2. The function should return a valid pointer to the new text object

3. The contents of the text object must be the expected ones (without BOM).

4. The language code within the text object must be empty.

5. The country code within the text object must be empty.
@end table
@end deffn

@deffn Test pdf_text_new_from_unicode_014
Create a text object with an input valid UTF-32HE encoded string with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should return PDF_OK.

2. The function should return a valid pointer to the new text object

3. The contents of the object must be completely equal to the input data

4. The language code within the text object must be empty.

5. The country code within the text object must be empty.
@end table
@end deffn


@deffn Test pdf_text_new_from_unicode_015
Create a text object with an input invalid UTF-8 encoded string without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should NOT return PDF_OK.

2. Pointer to the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_new_from_unicode_016
Create a text object with an input invalid UTF-16BE encoded string without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should NOT return PDF_OK.

2. Pointer to the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_new_from_unicode_017
Create a text object with an input invalid UTF-16LE encoded string without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should NOT return PDF_OK.

2. Pointer to the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_new_from_unicode_018
Create a text object with an input invalid UTF-16HE encoded string without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should NOT return PDF_OK.

2. Pointer to the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_new_from_unicode_019
Create a text object with an input invalid UTF-32BE encoded string without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should NOT return PDF_OK.

2. Pointer to the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_new_from_unicode_020
Create a text object with an input invalid UTF-32LE encoded string without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should NOT return PDF_OK.

2. Pointer to the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_new_from_unicode_021
Create a text object with an input invalid UTF-32HE encoded string without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should NOT return PDF_OK.

2. Pointer to the text object must remain unchanged.
@end table
@end deffn


@node pdf_text_new_from_u32
@subsubsection pdf_text_new_from_u32

@deffn Test pdf_text_new_from_u32_001
Create a text object given '0' as input number
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_u32} should return PDF_OK.

2. The contents of the text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_new_from_u32_001
Create a text object given a non-zero positive number
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_u32} should return PDF_OK.

2. The contents of the text object must be the expected ones.
@end table
@end deffn

@node pdf_text_get_country
@subsubsection pdf_text_get_country

@deffn Test pdf_text_get_country_001
Get country ID when the stored country ID is valid
@table @strong
@item Success conditions
1. The call to @code{pdf_text_get_country} should return a valid pointer.

2. The length of the returned string should be 2.
@end table
@end deffn

@deffn Test pdf_text_get_country_002
Get country ID when the stored country ID is invalid
@table @strong
@item Success conditions
1. The call to @code{pdf_text_get_country} should return a valid pointer.

2. The length of the returned string should be 0.
@end table
@end deffn

@node pdf_text_get_language
@subsubsection pdf_text_get_language

@deffn Test pdf_text_get_language_001
Get language ID when the stored language ID is valid
@table @strong
@item Success conditions
1. The call to @code{pdf_text_get_language} should return a valid pointer.

2. The length of the returned string should be 2.
@end table
@end deffn

@deffn Test pdf_text_get_language_002
Get language ID when the stored language ID is invalid
@table @strong
@item Success conditions
1. The call to @code{pdf_text_get_language} should return a valid pointer.

2. The length of the returned string should be 0.
@end table
@end deffn


@node pdf_text_set_country
@subsubsection pdf_text_set_country

@deffn Test pdf_text_set_country_001
Set a valid two-character country ID
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_country} should return PDF_OK.

2. The contents of the internal country ID representation should be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_set_country_002
Set an invalid one-character country ID
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_country} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_set_country_003
Set an invalid empty country ID
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_country} should NOT return PDF_OK.
@end table
@end deffn

@node pdf_text_set_language
@subsubsection pdf_text_set_language

@deffn Test pdf_text_set_language_001
Set a valid two-character language ID
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_language} should return PDF_OK.

2. The contents of the internal language ID representation should be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_set_language_002
Set an invalid one-character language ID
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_language} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_set_language_003
Set an invalid empty language ID
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_language} should NOT return PDF_OK.
@end table
@end deffn


@node pdf_text_empty_p
@subsubsection pdf_text_empty_p

@deffn Test pdf_text_empty_p_001
Check if a given empty text object is empty
@table @strong
@item Success conditions
1. The call to @code{pdf_text_empty_p} should return PDF_TRUE.
@end table
@end deffn

@deffn Test pdf_text_empty_p_002
Check if a given non-empty text object is empty
@table @strong
@item Success conditions
1. The call to @code{pdf_text_empty_p} should return PDF_FALSE.
@end table
@end deffn


@node pdf_text_get_host_encoding
@subsubsection pdf_text_get_host_encoding

@deffn Test pdf_text_get_host_encoding_001
Get the host encoding configured by the user. As this test really depends on what the user has configured in the system, the unit test will only check that a non-empty host encoding is returned.
@table @strong
@item Success conditions
1. The call to @code{pdf_text_get_host_encoding} should return a non-empty @code{pdf_text_host_encoding_t} variable.
@end table
@end deffn


@node pdf_text_check_host_encoding
@subsubsection pdf_text_check_host_encoding

@deffn Test pdf_text_check_host_encoding_001
Check if a given valid host encoding is available in the system. ASCII-7 is considered as the host encoding that every system should at least have, so the test will check for it.
@table @strong
@item Success conditions
1. The call to @code{pdf_text_check_host_encoding} should return PDF_OK.

2. A non-empty @code{pdf_text_host_encoding_t} variable should be returned as well.
@end table
@end deffn

@deffn Test pdf_text_check_host_encoding_002
Check if a given invalid host encoding is available in the system. An inexistent host encoding will be requested.
@table @strong
@item Success conditions
1. The call to @code{pdf_text_check_host_encoding} should NOT return PDF_OK.

2. The @code{pdf_text_host_encoding_t} variable should remain unchanged.
@end table
@end deffn

@node pdf_text_get_best_encoding
@subsubsection pdf_text_get_best_encoding

@deffn Test pdf_text_get_best_encoding_001
Check if a best encoding is returned. If available, it must return a valid Unicode-based host encoding. If no Unicode encoding is available, it should return the preferred encoding. As this test really depends on what the user has configured in the system, the unit test will only check that a non-empty host encoding is returned.
@table @strong
@item Success conditions
1. The call to @code{pdf_text_get_best_encoding} should return a non-empty @code{pdf_text_host_encoding_t} variable.
@end table
@end deffn


@node pdf_text_get_host
@subsubsection pdf_text_get_host

@deffn Test pdf_text_get_host_001
Get the contents of a text object in a valid host encoding
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_host} should return PDF_OK.

2. The returned string must be the expected one.
@end table
@end deffn

@deffn Test pdf_text_get_host_002
Get the contents of a text object in an invalid host encoding
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_host} should NOT return PDF_OK.
@end table
@end deffn

@node pdf_text_get_pdfdocenc
@subsubsection pdf_text_get_pdfdocenc

@deffn Test pdf_text_get_pdfdocenc_001
Get the contents of a text object in PDF Doc Encoding. The contents of the text object can all be transformed to PDF Doc Encoding without loss of information.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_pdfdocenc} should return PDF_OK.

2. The returned string must be the expected one, and NUL terminated
@end table
@end deffn

@deffn Test pdf_text_get_pdfdocenc_002
Get the contents of a text object in PDF Doc Encoding. The contents of the text object cannot be transformed to PDF Doc Encoding without loss of information. A default character must be used for those characters that cannot be represented in PDF Doc Encoding.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_pdfdocenc} should return PDF_OK.

2. The returned string must be the expected one, and NUL terminated
@end table
@end deffn

@node pdf_text_get_unicode
@subsubsection pdf_text_get_unicode

@deffn Test pdf_text_get_unicode_001
Get the contents of a non-empty text object in UTF-8 without BOM. The contents of the text object include characters that are encoded in UTF-8 using 8-bit, 16-bit, 24-bit and 32-bit.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must be the expected one, not NUL terminated.

3. The returned length must be the expected one.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_002
Get the contents of a non-empty text object in UTF-8 with BOM. The contents of the text object include characters that are encoded in UTF-8 using 8-bit, 16-bit, 24-bit and 32-bit.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must be the expected one, not NUL terminated.

3. The returned length must be the expected one, including the length of the BOM in UTF-8.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_003
Get the contents of an empty text object in UTF-8 without BOM.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must be NULL.

3. The returned length must be zero.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_004
Get the contents of an empty text object in UTF-8 with BOM.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must only contain the BOM in UTF-8, not NUL terminated.

3. The returned length must be equal to the length of the BOM in UTF-8.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_005
Get the contents of a non-empty text object with lang/country info, in UTF-8 without BOM and with lang/country information embedded (which should not be supported in UTF-8).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_006
Get the contents of a non-empty text object with lang/country info, in UTF-8 with BOM and with lang/country information embedded (which should not be supported in UTF-8).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn


@deffn Test pdf_text_get_unicode_007
Get the contents of a non-empty text object in UTF-16BE without BOM. The contents of the text object include characters that are encoded in UTF-16 using 16-bit and 32-bit.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must be the expected one, not NUL terminated.

3. The returned length must be the expected one.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_008
Get the contents of a non-empty text object in UTF-16BE with BOM. The contents of the text object include characters that are encoded in UTF-16 using 16-bit and 32-bit.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must be the expected one, not NUL terminated.

3. The returned length must be the expected one, including the length of the BOM in UTF-16.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_009
Get the contents of an empty text object in UTF-16BE without BOM.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must be NULL.

3. The returned length must be zero.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_010
Get the contents of an empty text object in UTF-16BE with BOM.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must only contain the BOM in UTF-16BE, not NUL terminated.

3. The returned length must be equal to the length of the BOM in UTF-16.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_011
Get the contents of a non-empty text object with lang/country info, in UTF-16BE without BOM and with lang/country information embedded (which IS supported in UTF-16BE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must be the expected one, including the lang/country information embedded, not NUL terminated.

3. The returned length must be the expected one, including the length of the lang/country info.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_012
Get the contents of a non-empty text object with language info (no country info), in UTF-16BE without BOM and with lang/country information embedded (which IS supported in UTF-16BE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must be the expected one, including the language information embedded, not NUL terminated.

3. The returned length must be the expected one, including the length of the language info.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_013
Get the contents of an empty text object with lang/country info, in UTF-16BE without BOM and with lang/country information embedded (which IS supported in UTF-16BE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must only include the lang/country information embedded, not NUL terminated.

3. The returned length must be equal to the length of the lang/country info.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_014
Get the contents of an empty text object with language info (no country info), in UTF-16BE without BOM and with lang/country information embedded (which IS supported in UTF-16BE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must only contain the language information embedded, not NUL terminated.

3. The returned length must be equal to the length of the language info.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_015
Get the contents of a non-empty text object with lang/country info, in UTF-16BE with BOM and with lang/country information embedded (which IS supported in UTF-16BE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must be the expected one, including the BOM and the lang/country information embedded, not NUL terminated.

3. The returned length must be the expected one, including the length of the lang/country info and the BOM.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_016
Get the contents of a non-empty text object with language info (no country info), in UTF-16BE with BOM and with lang/country information embedded (which IS supported in UTF-16BE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must be the expected one, including the BOM and the language information embedded, not NUL terminated.

3. The returned length must be the expected one, including the length of the language info and the BOM.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_017
Get the contents of an empty text object with lang/country info, in UTF-16BE with BOM and with lang/country information embedded (which IS supported in UTF-16BE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must only include the BOM and lang/country information embedded, not NUL terminated.

3. The returned length must be equal to the length of the lang/country info plus the length of the BOM.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_018
Get the contents of an empty text object with language info (no country info), in UTF-16BE with BOM and with lang/country information embedded (which IS supported in UTF-16BE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must only contain the BOM and the language information embedded, not NUL terminated.

3. The returned length must be equal to the length of the language info plus the length of the BOM.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_019
Get the contents of a non-empty text object in UTF-16LE without BOM. The contents of the text object include characters that are encoded in UTF-16 using 16-bit and 32-bit.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must be the expected one, not NUL terminated.

3. The returned length must be the expected one.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_020
Get the contents of a non-empty text object in UTF-16LE with BOM. The contents of the text object include characters that are encoded in UTF-16 using 16-bit and 32-bit.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must be the expected one, not NUL terminated.

3. The returned length must be the expected one, including the length of the BOM in UTF-16.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_021
Get the contents of an empty text object in UTF-16LE without BOM.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must be NULL.

3. The returned length must be zero.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_022
Get the contents of an empty text object in UTF-16LE with BOM.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must only contain the BOM in UTF-16LE, not NUL terminated.

3. The returned length must be equal to the length of the BOM in UTF-16.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_023
Get the contents of a non-empty text object with lang/country info, in UTF-16LE without BOM and with lang/country information embedded (which is NOT supported in UTF-16LE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_024
Get the contents of a non-empty text object with language info (no country info), in UTF-16LE without BOM and with lang/country information embedded (which is NOT supported in UTF-16LE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_025
Get the contents of an empty text object with lang/country info, in UTF-16LE without BOM and with lang/country information embedded (which is NOT supported in UTF-16LE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_026
Get the contents of an empty text object with language info (no country info), in UTF-16LE without BOM and with lang/country information embedded (which is NOT supported in UTF-16LE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_027
Get the contents of a non-empty text object with lang/country info, in UTF-16LE with BOM and with lang/country information embedded (which is NOT supported in UTF-16LE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_028
Get the contents of a non-empty text object with language info (no country info), in UTF-16LE with BOM and with lang/country information embedded (which is NOT supported in UTF-16LE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_029
Get the contents of an empty text object with lang/country info, in UTF-16LE with BOM and with lang/country information embedded (which is NOT supported in UTF-16LE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_030
Get the contents of an empty text object with language info (no country info), in UTF-16LE with BOM and with lang/country information embedded (which is NOT supported in UTF-16LE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_031
Get the contents of a non-empty text object in UTF-32BE without BOM.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must be the expected one, not NUL terminated.

3. The returned length must be the expected one.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_032
Get the contents of a non-empty text object in UTF-32BE with BOM.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must be the expected one, not NUL terminated.

3. The returned length must be the expected one, including the length of the BOM in UTF-32.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_033
Get the contents of an empty text object in UTF-32BE without BOM.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must be NULL.

3. The returned length must be zero.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_034
Get the contents of an empty text object in UTF-32BE with BOM.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must only contain the BOM in UTF-32BE, not NUL terminated.

3. The returned length must be equal to the length of the BOM in UTF-32.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_035
Get the contents of a non-empty text object with lang/country info, in UTF-32BE without BOM and with lang/country information embedded (which is NOT supported in UTF-32BE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_036
Get the contents of a non-empty text object with language info (no country info), in UTF-32BE without BOM and with lang/country information embedded (which is NOT supported in UTF-32BE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_037
Get the contents of an empty text object with lang/country info, in UTF-32BE without BOM and with lang/country information embedded (which is NOT supported in UTF-32BE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_038
Get the contents of an empty text object with language info (no country info), in UTF-32BE without BOM and with lang/country information embedded (which is NOT supported in UTF-32BE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_039
Get the contents of a non-empty text object with lang/country info, in UTF-32BE with BOM and with lang/country information embedded (which is NOT supported in UTF-32BE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_040
Get the contents of a non-empty text object with language info (no country info), in UTF-32BE with BOM and with lang/country information embedded (which is NOT supported in UTF-32BE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_041
Get the contents of an empty text object with lang/country info, in UTF-32BE with BOM and with lang/country information embedded (which is NOT supported in UTF-32BE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_042
Get the contents of an empty text object with language info (no country info), in UTF-32BE with BOM and with lang/country information embedded (which is NOT supported in UTF-32BE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_043
Get the contents of a non-empty text object in UTF-32LE without BOM.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must be the expected one, not NUL terminated.

3. The returned length must be the expected one.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_044
Get the contents of a non-empty text object in UTF-32LE with BOM.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must be the expected one, not NUL terminated.

3. The returned length must be the expected one, including the length of the BOM in UTF-32.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_045
Get the contents of an empty text object in UTF-32LE without BOM.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must be NULL.

3. The returned length must be zero.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_046
Get the contents of an empty text object in UTF-32LE with BOM.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should return PDF_OK.

2. The returned string must only contain the BOM in UTF-32LE, not NUL terminated.

3. The returned length must be equal to the length of the BOM in UTF-32.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_047
Get the contents of a non-empty text object with lang/country info, in UTF-32LE without BOM and with lang/country information embedded (which is NOT supported in UTF-32LE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_048
Get the contents of a non-empty text object with language info (no country info), in UTF-32LE without BOM and with lang/country information embedded (which is NOT supported in UTF-32LE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_049
Get the contents of an empty text object with lang/country info, in UTF-32LE without BOM and with lang/country information embedded (which is NOT supported in UTF-32LE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_050
Get the contents of an empty text object with language info (no country info), in UTF-32LE without BOM and with lang/country information embedded (which is NOT supported in UTF-32LE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_051
Get the contents of a non-empty text object with lang/country info, in UTF-32LE with BOM and with lang/country information embedded (which is NOT supported in UTF-32LE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_052
Get the contents of a non-empty text object with language info (no country info), in UTF-32LE with BOM and with lang/country information embedded (which is NOT supported in UTF-32LE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_053
Get the contents of an empty text object with lang/country info, in UTF-32LE with BOM and with lang/country information embedded (which is NOT supported in UTF-32LE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_get_unicode_054
Get the contents of an empty text object with language info (no country info), in UTF-32LE with BOM and with lang/country information embedded (which is NOT supported in UTF-32LE).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_unicode} should NOT return PDF_OK.
@end table
@end deffn


@node pdf_text_get_hex
@subsubsection pdf_text_get_hex

@deffn Test pdf_text_get_hex_001
Get the contents of a non-empty text object in Hexadecimal representation in ASCII
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_hex} should return a valid string, NUL terminated.

2. The contents of the returned string must be the expected ones.

3. The length of the string must be non-zero.
@end table
@end deffn

@deffn Test pdf_text_get_hex_002
Get the contents of an empty text object in Hexadecimal representation in ASCII
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_get_hex} should return a valid string, NUL terminated.

2. The length of the string must be zero.
@end table
@end deffn


@node pdf_text_set_host
@subsubsection pdf_text_set_host

@deffn Test pdf_text_set_host_001
Set the contents of a text object with an input valid host-encoded string
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_set_host} should return PDF_OK.

2. The contents of the text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_set_host_002
Set the contents of a text object with an input invalid host-encoded string
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_set_host} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_set_host_003
Set the contents of a text object with an input string encoded in an invalid host encoding
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_set_host} should NOT return PDF_OK.
@end table
@end deffn

@node pdf_text_set_pdfdocenc
@subsubsection pdf_text_set_pdfdocenc

@deffn Test pdf_text_set_pdfdocenc_001
Set the contents of a text object with an input valid PDF Doc Encoded string
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_set_pdfdocenc} should return PDF_OK.

2. The contents of the text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_set_pdfdocenc_002
Set the contents of a text object with an input empty PDF Doc Encoded string
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_set_pdfdocenc} should return PDF_OK.

2. The contents of the text object must be empty.
@end table
@end deffn

@deffn Test pdf_text_set_pdfdocenc_003
Set the contents of a text object with an input invalid PDF Doc Encoded string
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_set_pdfdocenc} should NOT return PDF_OK.
@end table
@end deffn


@node pdf_text_set_unicode
@subsubsection pdf_text_set_unicode

@deffn Test pdf_text_set_unicode_001
Set the contents of a text object with an input valid UTF-8 encoded string (containing 8-bit, 16-bit, 24-bit and 32-bit code points!) without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should return PDF_OK.

2. The contents of the text object must be the expected ones (without BOM).
@end table
@end deffn

@deffn Test pdf_text_set_unicode_002
Set the contents of a text object with an input valid UTF-16BE encoded string (16-bit and 32-bit code points!) without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should return PDF_OK.

2. The contents of the text object must be the expected ones (without BOM).
@end table
@end deffn

@deffn Test pdf_text_set_unicode_003
Set the contents of a text object with an input valid UTF-16LE encoded string (16-bit and 32-bit code points!) without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should return PDF_OK.

2. The contents of the text object must be the expected ones (without BOM).
@end table
@end deffn

@deffn Test pdf_text_set_unicode_004
Set the contents of a text object with an input valid UTF-16HE encoded string (16-bit and 32-bit code points!) without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should return PDF_OK.

2. The contents of the text object must be the expected ones (without BOM).
@end table
@end deffn

@deffn Test pdf_text_set_unicode_005
Set the contents of a text object with an input valid UTF-32BE encoded string without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should return PDF_OK.

2. The contents of the text object must be the expected ones (without BOM).
@end table
@end deffn

@deffn Test pdf_text_set_unicode_006
Set the contents of a text object with an input valid UTF-32LE encoded string without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should return PDF_OK.

2. The contents of the text object must be the expected ones (without BOM).
@end table
@end deffn

@deffn Test pdf_text_set_unicode_007
Set the contents of a text object with an input valid UTF-32HE encoded string without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_new_from_unicode} should return PDF_OK.

2. The contents of the text object must be the expected ones (without BOM).
@end table
@end deffn

@deffn Test pdf_text_set_unicode_008
Set the contents of a text object with an input valid UTF-8 encoded string (containing 8-bit, 16-bit, 24-bit and 32-bit code points!) with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should return PDF_OK.

2. The contents of the text object must be the expected ones (without BOM).
@end table
@end deffn

@deffn Test pdf_text_set_unicode_009
Set the contents of a text object with an input valid UTF-16BE encoded string (16-bit and 32-bit code points!) with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should return PDF_OK.

2. The contents of the text object must be the expected ones (without BOM).
@end table
@end deffn

@deffn Test pdf_text_set_unicode_010
Set the contents of a text object with an input valid UTF-16LE encoded string (16-bit and 32-bit code points!) with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should return PDF_OK.

2. The contents of the text object must be the expected ones (without BOM).
@end table
@end deffn

@deffn Test pdf_text_set_unicode_011
Set the contents of a text object with an input valid UTF-16HE encoded string (16-bit and 32-bit code points!) with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should return PDF_OK.

2. The contents of the text object must be the expected ones (without BOM).
@end table
@end deffn

@deffn Test pdf_text_set_unicode_012
Set the contents of a text object with an input valid UTF-32BE encoded string with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should return PDF_OK.

2. The contents of the text object must be the expected ones (without BOM).
@end table
@end deffn

@deffn Test pdf_text_set_unicode_013
Set the contents of a text object with an input valid UTF-32LE encoded string with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should return PDF_OK.

2. The contents of the text object must be the expected ones (without BOM).
@end table
@end deffn

@deffn Test pdf_text_set_unicode_014
Set the contents of a text object with an input valid UTF-32HE encoded string with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should return PDF_OK.

2. The contents of the text object must be the expected ones (without BOM).
@end table
@end deffn


@deffn Test pdf_text_set_unicode_015
Set the contents of a text object with an input invalid UTF-8 encoded string without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should NOT return PDF_OK.

2. The contents of the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_set_unicode_016
Set the contents of a text object with an input invalid UTF-16BE encoded string without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should NOT return PDF_OK.

2. The contents of the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_set_unicode_017
Set the contents of a text object with an input invalid UTF-16LE encoded string without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should NOT return PDF_OK.

2. The contents of the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_set_unicode_018
Set the contents of a text object with an input invalid UTF-16HE encoded string without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should NOT return PDF_OK.

2. The contents of the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_set_unicode_019
Set the contents of a text object with an input invalid UTF-32BE encoded string without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should NOT return PDF_OK.

2. The contents of the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_set_unicode_020
Set the contents of a text object with an input invalid UTF-32LE encoded string without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should NOT return PDF_OK.

2. The contents of the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_set_unicode_021
Set the contents of a text object with an input invalid UTF-32HE encoded string without BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should NOT return PDF_OK.

2. The contents of the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_set_unicode_022
Set the contents of a text object with an input invalid UTF-8 encoded string with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should NOT return PDF_OK.

2. The contents of the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_set_unicode_023
Set the contents of a text object with an input invalid UTF-16BE encoded string with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should NOT return PDF_OK.

2. The contents of the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_set_unicode_024
Set the contents of a text object with an input invalid UTF-16LE encoded string with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should NOT return PDF_OK.

2. The contents of the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_set_unicode_025
Set the contents of a text object with an input invalid UTF-16HE encoded string with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should NOT return PDF_OK.

2. The contents of the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_set_unicode_026
Set the contents of a text object with an input invalid UTF-32BE encoded string with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should NOT return PDF_OK.

2. The contents of the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_set_unicode_027
Set the contents of a text object with an input invalid UTF-32LE encoded string with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should NOT return PDF_OK.

2. The contents of the text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_set_unicode_028
Set the contents of a text object with an input invalid UTF-32HE encoded string with BOM
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should NOT return PDF_OK.

2. The contents of the text object must remain unchanged.
@end table
@end deffn


@deffn Test pdf_text_set_unicode_029
Set the contents of a text object with an input valid UTF-16BE encoded string with BOM and embedded language/country information (it should treat that information as standard UTF-16BE)
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should return PDF_OK.

2. The contents of the text object must be the expected ones.

3. The language code must be empty.

4. The country code must be empty.
@end table
@end deffn

@deffn Test pdf_text_set_unicode_030
Set the contents of a text object with an input valid UTF-16BE encoded string without BOM and embedded language/country information (it should treat that information as standard UTF-16BE)
@table @strong
@item Success conditions
1. The call to @code{pdf_text_set_unicode} should return PDF_OK.

2. The contents of the text object must be the expected ones.

3. The language code must be empty.

4. The country code must be empty.
@end table
@end deffn


@node pdf_text_concat
@subsubsection pdf_text_concat

@deffn Test pdf_text_concat_001
Concatenate two non-empty text objects with the same lang/country information. Don't override langinfo.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_concat} should return PDF_OK.

2. The contents of the output text object must be the expected ones.

3. The lang/country information in the output object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_concat_002
Concatenate two non-empty text objects without lang/country information. Don't override langinfo.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_concat} should return PDF_OK.

2. The contents of the output text object must be the expected ones.

3. The lang/country information in the output object must be empty.
@end table
@end deffn

@deffn Test pdf_text_concat_003
Concatenate two non-empty text objects with different lang/country information. Don't override langinfo.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_concat} should NOT return PDF_OK.

2. The contents of the output text object must remain unchanged.
@end table
@end deffn


@deffn Test pdf_text_concat_004
Concatenate two empty text objects with the same lang/country information. Don't override langinfo.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_concat} should return PDF_OK.

2. The contents of the output text object should be empty.

3. The lang/country information in the output object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_concat_005
Concatenate two empty text objects without lang/country information. Don't override langinfo.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_concat} should return PDF_OK.

2. The contents of the output text object should be empty.

3. The lang/country information in the output object must be empty.
@end table
@end deffn

@deffn Test pdf_text_concat_006
Concatenate two empty text objects with different lang/country information. Don't override langinfo.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_concat} should NOT return PDF_OK.

2. The contents of the output text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_concat_007
Concatenate two non-empty text objects with the same lang/country information. Override langinfo.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_concat} should return PDF_OK.

2. The contents of the output text object must be the expected ones.

3. The lang/country information in the output object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_concat_008
Concatenate two non-empty text objects without lang/country information. Override langinfo.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_concat} should return PDF_OK.

2. The contents of the output text object must be the expected ones.

3. The lang/country information in the output object must be empty.
@end table
@end deffn

@deffn Test pdf_text_concat_009
Concatenate two non-empty text objects with different lang/country information. Override langinfo.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_concat} should return PDF_OK.

2. The contents of the output text object must be the expected ones.

3. The lang/country information in the output object must remain unchanged.
@end table
@end deffn


@deffn Test pdf_text_concat_010
Concatenate two empty text objects with the same lang/country information. Override langinfo.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_concat} should return PDF_OK.

2. The contents of the output text object should be empty.

3. The lang/country information in the output object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_concat_011
Concatenate two empty text objects without lang/country information. Override langinfo.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_concat} should return PDF_OK.

2. The contents of the output text object should be empty.

3. The lang/country information in the output object must be empty.
@end table
@end deffn

@deffn Test pdf_text_concat_012
Concatenate two empty text objects with different lang/country information. Override langinfo.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_concat} should return PDF_OK.

2. The contents of the output text object should be empty.

3. The lang/country information in the output object must be empty.
@end table
@end deffn


@node pdf_text_replace
@subsubsection pdf_text_replace

@deffn Test pdf_text_replace_001
Replace an old non-empty pattern with a new non-empty pattern of different sizes (old > new). At least one replacement is done.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn


@deffn Test pdf_text_replace_002
Replace an old non-empty pattern with a new non-empty pattern of different sizes (old < new). At least one replacement is done.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn


@deffn Test pdf_text_replace_003
Replace an old non-empty pattern with a new non-empty pattern of same sizes. At least one replacement is done.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn


@deffn Test pdf_text_replace_004
Replace an old non-empty pattern with a new empty pattern (remove old pattern from text). At least one replacement is done.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn


@deffn Test pdf_text_replace_005
Replace an old non-empty pattern with a new non-empty pattern of different sizes (old > new). No replacement is done.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace} should return PDF_OK.

2. The contents of the output text object remain unchanged.
@end table
@end deffn


@deffn Test pdf_text_replace_006
Replace an old non-empty pattern with a new non-empty pattern of different sizes (old < new). No replacement is done.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace} should return PDF_OK.

2. The contents of the output text object remain unchanged.
@end table
@end deffn


@deffn Test pdf_text_replace_007
Replace an old non-empty pattern with a new non-empty pattern of same sizes. No replacement is done.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace} should return PDF_OK.

2. The contents of the output text object remain unchanged.
@end table
@end deffn


@deffn Test pdf_text_replace_008
Replace an old non-empty pattern with a new empty pattern (remove old pattern from text). No replacement is done.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace} should return PDF_OK.

2. The contents of the output text object remain unchanged.
@end table
@end deffn


@deffn Test pdf_text_replace_009
Replace an old empty pattern with a new non-empty pattern (old pattern can't be empty!)
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_replace_010
Replace an old non-empty pattern with a new non-empty pattern in an empty text object.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace} should return PDF_OK.

2. The contents of the output text object remain empty.
@end table
@end deffn

@node pdf_text_replace_ascii
@subsubsection pdf_text_replace_ascii

@deffn Test pdf_text_replace_ascii_001
Replace an old non-empty ASCII pattern with a new ASCII non-empty pattern of different sizes (old > new). At least one replacement is done.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace_ascii} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn


@deffn Test pdf_text_replace_ascii_002
Replace an old non-empty ASCII pattern with a new non-empty ASCII pattern of different sizes (old < new). At least one replacement is done.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace_ascii} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn


@deffn Test pdf_text_replace_ascii_003
Replace an old non-empty ASCII pattern with a new non-empty ASCII pattern of same sizes. At least one replacement is done.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace_ascii} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn


@deffn Test pdf_text_replace_ascii_004
Replace an old non-empty ASCII pattern with a new empty ASCII pattern (remove old pattern from text). At least one replacement is done.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace_ascii} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn


@deffn Test pdf_text_replace_ascii_005
Replace an old non-empty ASCII pattern with a new non-empty ASCII pattern of different sizes (old > new). No replacement is done.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace_ascii} should return PDF_OK.

2. The contents of the output text object remain unchanged.
@end table
@end deffn


@deffn Test pdf_text_replace_ascii_006
Replace an old non-empty ASCII pattern with a new non-empty ASCII pattern of different sizes (old < new). No replacement is done.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace_ascii} should return PDF_OK.

2. The contents of the output text object remain unchanged.
@end table
@end deffn


@deffn Test pdf_text_replace_ascii_007
Replace an old non-empty ASCII pattern with a new non-empty ASCII pattern of same sizes. No replacement is done.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace_ascii} should return PDF_OK.

2. The contents of the output text object remain unchanged.
@end table
@end deffn


@deffn Test pdf_text_replace_ascii_008
Replace an old non-empty ASCII pattern with a new empty ASCII pattern (remove old pattern from text). No replacement is done.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace_ascii} should return PDF_OK.

2. The contents of the output text object remain unchanged.
@end table
@end deffn


@deffn Test pdf_text_replace_ascii_009
Replace an old empty ASCII pattern with a new non-empty ASCII pattern (old pattern can't be empty!)
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace_ascii} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_replace_ascii_010
Replace an old non-empty ASCII pattern with a new non-empty ASCII pattern in an empty text object.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace_ascii} should return PDF_OK.

2. The contents of the output text object remain empty.
@end table
@end deffn

@deffn Test pdf_text_replace_ascii_011
Replace an old non-valid ASCII pattern with a new valid ASCII pattern.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace_ascii} should NOT return PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_replace_ascii_012
Replace an old valid ASCII pattern with a new non-valid ASCII pattern.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_replace_ascii} should NOT return PDF_OK.
@end table
@end deffn


@node pdf_text_filter
@subsubsection pdf_text_filter

@deffn Test pdf_text_filter_001
Apply the `Normalize line endings' filter to a text object which contains different types of line endings.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_002
Apply the `Normalize line endings' filter to an empty text object.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_filter_003
Apply the `Remove line endings' filter to a text object which contains different types of line endings.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_004
Apply the `Remove line endings' filter to an empty text object.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_filter_005
Apply the `Remove ampersands' filter to a text object which contains single and double ampersands.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_006
Apply the `Remove ampersands' filter to an empty text object.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_filter_007
Apply the `Normalize with full width' filter to a text object that contains code points that have a valid full width representation.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_008
Apply the `Normalize with full width' filter to a text object that does not contain code points that have a valid full width representation.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_filter_009
Apply the `Normalize with full width' filter to an empty text object.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must remain unchanged.
@end table
@end deffn

@deffn Test pdf_text_filter_010
Apply the `Upper case' filter to a text object that contains simple-case-conversion characters.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.

3. The length of the output text must be equal to the length of the input text.
@end table
@end deffn

@deffn Test pdf_text_filter_011
Apply the `Upper case' filter to a text object that contains special-case-conversion characters with no context condition.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_012
Apply the `Upper case' filter to a text object that contains special-case-conversion characters with Final_Sigma context condition.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_013
Apply the `Upper case' filter to a text object that contains special-case-conversion characters with After_Soft_Dotted context condition.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_014
Apply the `Upper case' filter to a text object that contains special-case-conversion characters with More_Above context condition.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn


@deffn Test pdf_text_filter_015
Apply the `Upper case' filter to a text object that contains special-case-conversion characters with Before_Dot context condition.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_016
Apply the `Upper case' filter to a text object that contains special-case-conversion characters with After_I context condition.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_017
Apply the `Upper case' filter to a text object that contains special-case-conversion characters with language-dependent context condition.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_018
Apply the `Upper case' filter to a text object that contains special-case-conversion characters with language-dependent and After_I context condition (to check two context conditions at the same time).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_019
Apply the `Upper case' filter to a text object that contains special-case-conversion characters with language-dependent and Not_Before_Dot context condition (to check two context conditions at the same time, where one of them is negated with Not_).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn


@deffn Test pdf_text_filter_020
Apply the `Upper case' filter to a text object that contains one special-case-conversion character with Final_Sigma context condition, where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_021
Apply the `Upper case' filter to a text object that contains one special-case-conversion characters with After_Soft_Dotted context condition, where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_022
Apply the `Upper case' filter to a text object that contains one special-case-conversion character with More_Above context condition, where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn


@deffn Test pdf_text_filter_023
Apply the `Upper case' filter to a text object that contains one special-case-conversion character with Before_Dot context condition, where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_024
Apply the `Upper case' filter to a text object that contains one special-case-conversion character with After_I context condition, where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_025
Apply the `Upper case' filter to a text object that contains one special-case-conversion character with language-dependent context condition, where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_026
Apply the `Upper case' filter to a text object that contains one special-case-conversion character with language-dependent and After_I context condition (to check two context conditions at the same time), where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_027
Apply the `Upper case' filter to a text object that contains one special-case-conversion character with language-dependent and Not_Before_Dot context condition (to check two context conditions at the same time, where one of them is negated with Not_), where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn


@deffn Test pdf_text_filter_028
Apply the `Small case' filter to a text object that contains simple-case-conversion characters.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.

3. The length of the output text must be equal to the length of the input text.
@end table
@end deffn

@deffn Test pdf_text_filter_029
Apply the `Small case' filter to a text object that contains special-case-conversion characters with no context condition.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_030
Apply the `Small case' filter to a text object that contains special-case-conversion characters with Final_Sigma context condition.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_031
Apply the `Small case' filter to a text object that contains special-case-conversion characters with After_Soft_Dotted context condition.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_032
Apply the `Small case' filter to a text object that contains special-case-conversion characters with More_Above context condition.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn


@deffn Test pdf_text_filter_033
Apply the `Small case' filter to a text object that contains special-case-conversion characters with Before_Dot context condition.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_034
Apply the `Small case' filter to a text object that contains special-case-conversion characters with After_I context condition.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_035
Apply the `Small case' filter to a text object that contains special-case-conversion characters with language-dependent context condition.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_036
Apply the `Small case' filter to a text object that contains special-case-conversion characters with language-dependent and After_I context condition (to check two context conditions at the same time).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_037
Apply the `Small case' filter to a text object that contains special-case-conversion characters with language-dependent and Not_Before_Dot context condition (to check two context conditions at the same time, where one of them is negated with Not_).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn


@deffn Test pdf_text_filter_038
Apply the `Small case' filter to a text object that contains one special-case-conversion character with Final_Sigma context condition, where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_039
Apply the `Small case' filter to a text object that contains one special-case-conversion characters with After_Soft_Dotted context condition, where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_040
Apply the `Small case' filter to a text object that contains one special-case-conversion character with More_Above context condition, where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn


@deffn Test pdf_text_filter_041
Apply the `Small case' filter to a text object that contains one special-case-conversion character with Before_Dot context condition, where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_042
Apply the `Small case' filter to a text object that contains one special-case-conversion character with After_I context condition, where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_043
Apply the `Small case' filter to a text object that contains one special-case-conversion character with language-dependent context condition, where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_044
Apply the `Small case' filter to a text object that contains one special-case-conversion character with language-dependent and After_I context condition (to check two context conditions at the same time), where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_045
Apply the `Small case' filter to a text object that contains one special-case-conversion character with language-dependent and Not_Before_Dot context condition (to check two context conditions at the same time, where one of them is negated with Not_), where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn


@deffn Test pdf_text_filter_046
Apply the `Title case' filter to a text object that contains simple-case-conversion characters.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.

3. The length of the output text must be equal to the length of the input text.
@end table
@end deffn

@deffn Test pdf_text_filter_047
Apply the `Title case' filter to a text object that contains special-case-conversion characters with no context condition.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_048
Apply the `Title case' filter to a text object that contains special-case-conversion characters with Final_Sigma context condition.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_049
Apply the `Title case' filter to a text object that contains special-case-conversion characters with After_Soft_Dotted context condition.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_050
Apply the `Title case' filter to a text object that contains special-case-conversion characters with More_Above context condition.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn


@deffn Test pdf_text_filter_051
Apply the `Title case' filter to a text object that contains special-case-conversion characters with Before_Dot context condition.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_052
Apply the `Title case' filter to a text object that contains special-case-conversion characters with After_I context condition.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_053
Apply the `Title case' filter to a text object that contains special-case-conversion characters with language-dependent context condition.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_054
Apply the `Title case' filter to a text object that contains special-case-conversion characters with language-dependent and After_I context condition (to check two context conditions at the same time).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_055
Apply the `Title case' filter to a text object that contains special-case-conversion characters with language-dependent and Not_Before_Dot context condition (to check two context conditions at the same time, where one of them is negated with Not_).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn


@deffn Test pdf_text_filter_056
Apply the `Title case' filter to a text object that contains one special-case-conversion character with Final_Sigma context condition, where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_057
Apply the `Title case' filter to a text object that contains one special-case-conversion characters with After_Soft_Dotted context condition, where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_058
Apply the `Title case' filter to a text object that contains one special-case-conversion character with More_Above context condition, where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn


@deffn Test pdf_text_filter_059
Apply the `Title case' filter to a text object that contains one special-case-conversion character with Before_Dot context condition, where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_060
Apply the `Title case' filter to a text object that contains one special-case-conversion character with After_I context condition, where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_061
Apply the `Title case' filter to a text object that contains one special-case-conversion character with language-dependent context condition, where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_062
Apply the `Title case' filter to a text object that contains one special-case-conversion character with language-dependent and After_I context condition (to check two context conditions at the same time), where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_063
Apply the `Title case' filter to a text object that contains one special-case-conversion character with language-dependent and Not_Before_Dot context condition (to check two context conditions at the same time, where one of them is negated with Not_), where the condition is not fulfilled.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn


@deffn Test pdf_text_filter_064
Apply the `Title case', `Small case' and `Upper case' filters to a text object. (At most one case conversion must be applied in a filter operation).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should NOT return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn

@deffn Test pdf_text_filter_065
Apply the `Small case' , `Remove ampersands' and  `Normalize with full width' filters to a text object (Applying more than one filter at a time).
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_filter} should return PDF_OK.

2. The contents of the output text object must be the expected ones.
@end table
@end deffn


@node pdf_text_cmp
@subsubsection pdf_text_cmp

@deffn Test pdf_text_cmp_001
Compare two equal text objects, case-sensitive.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_cmp} should return 0.

2. The returned status in @code{ p_ret_code} should be PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_cmp_002
Compare two equal text objects, non-case-sensitive.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_cmp} should return 0.

2. The returned status in @code{ p_ret_code} should be PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_cmp_003
Compare two equal text objects (one in uppercase, the other one in lowercase), case-sensitive.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_cmp} should NOT return 0.

2. The returned status in @code{ p_ret_code} should be PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_cmp_004
Compare two equal text objects (one in uppercase, the other one in lowercase), non-case-sensitive.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_cmp} should return 0.

2. The returned status in @code{ p_ret_code} should be PDF_OK.
@end table
@end deffn


@deffn Test pdf_text_cmp_005
Compare two different text objects, case-sensitive.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_cmp} should NOT return 0.

2. The returned status in @code{ p_ret_code} should be PDF_OK.
@end table
@end deffn

@deffn Test pdf_text_cmp_006
Compare two different text objects, non-case-sensitive.
@table @strong
@item Success conditions
1. The call to @code{ pdf_text_cmp} should NOT return 0.

2. The returned status in @code{ p_ret_code} should be PDF_OK.
@end table
@end deffn


@node List Module
@subsection List Module

@menu
* pdf_list_add_at::
* pdf_list_add_first::
* pdf_list_add_last::
* pdf_list_create::
* pdf_list_destroy::
* pdf_list_get_at::
* pdf_list_indexof_from_to::
* pdf_list_indexof_from::
* pdf_list_indexof::
* pdf_list_iterator_from_to::
* pdf_list_iterator_next::
* pdf_list_iterator::
* pdf_list_iterator_free::
* pdf_list_next_node::
* pdf_list_node_value::
* pdf_list_previous_node::
* pdf_list_remove_at::
* pdf_list_remove_node::
* pdf_list_remove::
* pdf_list_search_from_to::
* pdf_list_search_from::
* pdf_list_search::
* pdf_list_set_at::
* pdf_list_size::
* pdf_list_sorted_add::
* pdf_list_sorted_remove::
* pdf_list_sorted_indexof::
* pdf_list_sorted_indexof_from_to::
* pdf_list_sorted_search::
* pdf_list_sorted_search_from_to::
@end menu

@node pdf_list_add_at
@subsubsection pdf_list_add_at

@deffn Test pdf_list_add_at_001
Try to add a new element at the 0 position.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_list_add_at_002
Try to add a new element at an invalid position.
@table @strong
@item Success condition
Returns PDF_EINVRANGE
@end table
@end deffn

@node pdf_list_add_first
@subsubsection pdf_list_add_first

@deffn Test pdf_list_add_first_001
Try to add an element at the beginning of the list.
@table @strong
@item Success condition
We get the right pdf_list_size().
@end table
@end deffn

@deffn Test pdf_list_add_first_002
Try to add an element at the beginning of the list allowing duplicates.
@table @strong
@item Success condition
We get the right pdf_list_size().
@end table
@end deffn

@node pdf_list_add_last
@subsubsection pdf_list_add_last

@deffn Test pdf_list_add_last_001
Try to add some elements.
@table @strong
@item Success condition
We get the right pdf_list_size().
@end table
@end deffn

@node pdf_list_create
@subsubsection pdf_list_create

@deffn Test pdf_list_create_001
Try to create an empty list.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_list_create_002
Try to create an empty list given a NULL list pointer.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn

@deffn Test pdf_list_create_003
Try to create an empty list allowing duplicates.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@node pdf_list_destroy
@subsubsection pdf_list_destroy

@deffn Test pdf_list_destroy_001
Try to destroy an empty list.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@node pdf_list_get_at
@subsubsection pdf_list_get_at

@deffn Test pdf_list_get_at_001
Try to get a node value.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_list_get_at_002
Try to get a node value given a NULL value pointer.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn

@deffn Test pdf_list_get_at_003
Try to get a node value at an invalid position.
@table @strong
@item Success condition
Returns EINVRANGE
@end table
@end deffn

@node pdf_list_indexof_from_to
@subsubsection pdf_list_indexof_from_to

@deffn Test pdf_list_indexof_from_to_001
Try to get the index of a existent element from position '0'.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_list_indexof_from_to_002
Try to get the index of a existent element from invalid position.
@table @strong
@item Success condition
Returns PDF_EINVRANGE
@end table
@end deffn

@deffn Test pdf_list_indexof_from_to_003
Try to get the index of a existent element given a NULL position pointer.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn

@deffn Test pdf_list_indexof_from_to_004
Try to get the index of a non-existent element.
@table @strong
@item Success condition
Returns PDF_ENONODE
@end table
@end deffn

@node pdf_list_indexof_from
@subsubsection pdf_list_indexof_from


@deffn Test pdf_list_indexof_from_001
Try to get the index of a existent element from position '0'.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_list_indexof_from_002
Try to get the index of a existent element from invalid position.
@table @strong
@item Success condition
Returns PDF_EINVRANGE
@end table
@end deffn

@deffn Test pdf_list_indexof_from_003
Try to get the index of a existent element given a NULL position pointer.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn

@deffn Test pdf_list_indexof_from_004
Try to get the index of a non-existent element.
@table @strong
@item Success condition
Returns PDF_ENONODE
@end table
@end deffn


@node pdf_list_indexof
@subsubsection pdf_list_indexof

@deffn Test pdf_list_indexof_001
Try to get the index of an existent element.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_list_indexof_002
Try to get the index of a non-existent element.
@table @strong
@item Success condition
Returns PDF_ENONODE
@end table
@end deffn

@deffn Test pdf_list_indexof_003
Try to get the index of an element given a NULL position pointer.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn


@node pdf_list_iterator_from_to
@subsubsection pdf_list_iterator_from_to

@deffn Test pdf_list_iterator_from_to_001
Try to get an iterator in a given range.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_list_iterator_from_to_002
Try to get an iterator in an invalid range.
@table @strong
@item Success condition
Returns PDF_EINVRANGE
@end table
@end deffn

@deffn Test pdf_list_iterator_from_to_003
Try to get an iterator given a NULL iterator pointer.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn


@node pdf_list_iterator_next
@subsubsection pdf_list_iterator_next

@deffn Test pdf_list_iterator_next_001
Try to get the next element using an iterator.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_list_iterator_next_002
Try to get the next element using an iterator from an empty list.
@table @strong
@item Success condition
Returns PDF_ENONODE
@end table
@end deffn


@node pdf_list_iterator
@subsubsection pdf_list_iterator

@deffn Test pdf_list_iterator_001
Try to create an iterator from list.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_list_iterator_002
Try to create an iterator given a NULL iterator pointer.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn

@node pdf_list_iterator_free
@subsubsection pdf_list_iterator_free

@deffn Test pdf_list_iterator_free_001
Try to destroy an iterator.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@node pdf_list_next_node
@subsubsection pdf_list_next_node

@deffn Test pdf_list_next_node_001
Try to get the next node given another node.
@table @strong
@item Success condition
Returns PDF_OK.
@end table
@end deffn

@deffn Test pdf_list_next_node_002
Try to get the next node given the last node in the list.
@table @strong
@item Success condition
Returns PDF_ENONODE
@end table
@end deffn

@deffn Test pdf_list_next_node_003
Try to get the next node given a NULL next pointer.
@table @strong
@item Success condition
Returns PDF_EBADDATA.
@end table
@end deffn


@node pdf_list_node_value
@subsubsection pdf_list_node_value

@deffn Test pdf_list_node_value_001
Try to get a node value.
@table @strong
@item Success condition
The returned value is the expected.
@end table
@end deffn


@node pdf_list_previous_node
@subsubsection pdf_list_previous_node

@deffn Test pdf_list_previous_node_001
Try to get the previous node given another node.
@table @strong
@item Success condition
Returns PDF_OK.
@end table
@end deffn

@deffn Test pdf_list_previous_node_002
Try to get the previous node given the first node.
@table @strong
@item Success condition
Returns PDF_ENONODE.
@end table
@end deffn

@deffn Test pdf_list_previous_node_003
Try to get the previous node given a NULL prev pointer.
@table @strong
@item Success condition
Returns PDF_EBADDATA.
@end table
@end deffn


@node pdf_list_remove_at
@subsubsection pdf_list_remove_at

@deffn Test pdf_list_remove_at_001
Try to remove a node at some position
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_list_remove_at_002
Try to remove a node at an invalid position
@table @strong
@item Success condition
Returns PDF_EINVRANGE
@end table
@end deffn


@node pdf_list_remove_node
@subsubsection pdf_list_remove_node

@deffn Test pdf_list_remove_node_001
Try to remove a given node from a list.
@table @strong
@item Success condition
The size is the expected.
@end table
@end deffn

@node pdf_list_remove
@subsubsection pdf_list_remove

@deffn Test pdf_list_remove_001
Try to remove an existing element in a list.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_list_remove_002
Try to remove an non-existent element.
@table @strong
@item Success condition
Returns PDF_ENONODE
@end table
@end deffn


@node pdf_list_search_from_to
@subsubsection pdf_list_search_from_to

@deffn Test pdf_list_search_from_to_001
Try to search an existent element in the correct range.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_list_search_from_to_002
Try to seach an element in an invalid range.
@table @strong
@item Success condition
Returns PDF_EINVRANGE.
@end table
@end deffn

@deffn Test pdf_list_search_from_to_003
Try to search a non-existent element in a list.
@table @strong
@item Success condition
Returns PDF_ENONODE.
@end table
@end deffn

@deffn Test pdf_list_search_from_to_004
Try search an element given a NULL node pointer.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn


@node pdf_list_search_from
@subsubsection pdf_list_search_from

@deffn Test pdf_list_search_from_001
Try to search an existent element in the correct range.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_list_search_from_002
Try to seach an element in an invalid range.
@table @strong
@item Success condition
Returns PDF_EINVRANGE.
@end table
@end deffn

@deffn Test pdf_list_search_from_003
Try to search a non-existent element in a list.
@table @strong
@item Success condition
Returns PDF_ENONODE.
@end table
@end deffn

@deffn Test pdf_list_search_from_004
Try search an element given a NULL node pointer.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn


@node pdf_list_search
@subsubsection pdf_list_search

@deffn Test pdf_list_search_001
Try to search for an existing element in a list.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_list_search_002
Try to search an existent element given a NULL node pointer.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn

@deffn Test pdf_list_search_003
Try to search for a non-existent element in a list.
@table @strong
@item Success condition
Returns PDF_ENONODE
@end table
@end deffn


@node pdf_list_set_at
@subsubsection pdf_list_set_at

@deffn Test pdf_list_set_at_001
Try to replace a node value in a list.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_list_set_at_002
Try to replace a node value at an invalid position.
@table @strong
@item Success condition
Returns PDF_INVRANGE
@end table
@end deffn

@node pdf_list_size
@subsubsection pdf_list_size

@deffn Test pdf_list_size_001
Try to get an empty list size.
@table @strong
@item Success condition
Returns 0.
@end table
@end deffn


@node pdf_list_sorted_add
@subsubsection pdf_list_sorted_add

@deffn Test pdf_list_sorted_add_001
Try to add an element at the beginning of the list.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_list_sorted_add_002
Try to add an element at the beginning of the list with NULL compar_fn.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn

@node pdf_list_sorted_remove
@subsubsection pdf_list_sorted_remove

@deffn Test pdf_list_sorted_remove_001
Try to remove an existing element in a list.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_list_sorted_remove_002
Try to remove an non-existent element.
@table @strong
@item Success condition
Returns PDF_ENONODE
@end table
@end deffn

@deffn Test pdf_list_sorted_remove_003
Try to remove an element with a NULL compar_fn.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn


@node pdf_list_sorted_indexof
@subsubsection pdf_list_sorted_indexof

@deffn Test pdf_list_sorted_indexof_001
Try to get the index of an existent element.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_list_sorted_indexof_002
Try to get the index of a non-existent element.
@table @strong
@item Success condition
Returns PDF_ENONODE
@end table
@end deffn

@deffn Test pdf_list_sorted_indexof_003
Try to get the index of an element given a NULL position pointer.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn

@deffn Test pdf_list_sorted_indexof_004
Try to get the index of an element given a NULL compar_fn.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn


@node pdf_list_sorted_indexof_from_to
@subsubsection pdf_list_sorted_indexof_from_to

@deffn Test pdf_list_sorted_indexof_from_to_001
Try to get the index of a existent element from position '0'.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_list_sorted_indexof_from_to_002
Try to get the index of a existent element from invalid position.
@table @strong
@item Success condition
Returns PDF_EINVRANGE
@end table
@end deffn

@deffn Test pdf_list_sorted_indexof_from_to_003
Try to get the index of a existent element given a NULL position pointer.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn

@deffn Test pdf_list_sorted_indexof_from_to_004
Try to get the index of a non-existent element.
@table @strong
@item Success condition
Returns PDF_ENONODE
@end table
@end deffn

@deffn Test pdf_list_sorted_indexof_from_to_005
Try to get the index of a existent element given a NULL compar_fn.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn


@node pdf_list_sorted_search
@subsubsection pdf_list_sorted_search


@deffn Test pdf_list_sorted_search_001
Try to search for an existing element in a list.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_list_sorted_search_002
Try to search an existent element given a NULL node pointer.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn

@deffn Test pdf_list_sorted_search_003
Try to search for a non-existent element in a list.
@table @strong
@item Success condition
Returns PDF_ENONODE
@end table
@end deffn

@deffn Test pdf_list_sorted_search_004
Try to search an existent element given a NULL compar_fn.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn


@node pdf_list_sorted_search_from_to
@subsubsection pdf_list_sorted_search_from_to


@deffn Test pdf_list_sorted_search_from_to_001
Try to search an existent element in the correct range.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_list_sorted_search_from_to_002
Try to seach an element in an invalid range.
@table @strong
@item Success condition
Returns PDF_EINVRANGE.
@end table
@end deffn

@deffn Test pdf_list_sorted_search_from_to_003
Try to search a non-existent element in a list.
@table @strong
@item Success condition
Returns PDF_ENONODE.
@end table
@end deffn

@deffn Test pdf_list_sorted_search_from_to_004
Try search an element given a NULL node pointer.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn

@deffn Test pdf_list_sorted_search_from_to_005
Try search an element given a NULL compar_fn.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn


@node Hash Module
@subsection Hash Module

@menu
* pdf_hash_create::
* pdf_hash_detroy::
* pdf_hash_size::
* pdf_hash_key_p::
* pdf_hash_rename::
* pdf_hash_add::
* pdf_hash_remove::
* pdf_hash_search::
* pdf_hash_iterator::
* pdf_hash_iterator_next::
* pdf_hash_iterator_free::
@end menu

@node pdf_hash_create
@subsubsection pdf_hash_create

@deffn Test pdf_hash_create_001
Try to create an empty hash.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn


@deffn Test pdf_hash_create_002
Try to create an empty hash with a NULL pointer.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn

@node pdf_hash_detroy
@subsubsection pdf_hash_detroy

@deffn Test pdf_hash_detroy_001
Try to destroy an empty hash.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@node pdf_hash_size
@subsubsection pdf_hash_size

@deffn Test pdf_hash_size_001
Try to get the size of an empty hash.
@table @strong
@item Success condition
Returns 0
@end table
@end deffn


@node pdf_hash_key_p
@subsubsection pdf_hash_key_p


@deffn Test pdf_hash_key_p_001
Try to prove that a given key exist.
@table @strong
@item Success condition
Returns PDF_TRUE
@end table
@end deffn


@deffn Test pdf_hash_key_p_002
Try to prove that a given key doesn't exist.
@table @strong
@item Success condition
Returns PDF_FALSE
@end table
@end deffn

@node pdf_hash_rename
@subsubsection pdf_hash_rename


@deffn Test pdf_hash_rename_001
Try to rename an existent key and prove it was renamed.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn


@deffn Test pdf_hash_rename_002
Try to rename a non-existent key.
@table @strong
@item Success condition
Returns PDF_ERROR
@end table
@end deffn



@deffn Test pdf_hash_rename_003
Try to rename a key given a NULL key.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn


@deffn Test pdf_hash_rename_004
Try to rename a key given a NULL new_key.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn


@node pdf_hash_add
@subsubsection pdf_hash_add

@deffn Test pdf_hash_add_001
Try to add key/value pair to an empty hash.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn


@deffn Test pdf_hash_add_002
Try to add NULL/value pair to an empty hash.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn


@deffn Test pdf_hash_add_003
Try to add key/NULL pair to an empty hash.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn


@node pdf_hash_remove
@subsubsection pdf_hash_remove


@deffn Test pdf_hash_remove_001
Try to remove an existent element.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn


@deffn Test pdf_hash_remove_002
Try to remove a non-existent element.
@table @strong
@item Success condition
Returns PDF_ERROR
@end table
@end deffn


@deffn Test pdf_hash_remove_003
Try to remove a element givn a NULL key.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn


@node pdf_hash_search
@subsubsection pdf_hash_search


@deffn Test pdf_hash_search_001
Try to search an existent element.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn


@deffn Test pdf_hash_search_002
Try to search a non-existent element.
@table @strong
@item Success condition
Returns PDF_ERROR
@end table
@end deffn


@deffn Test pdf_hash_search_003
Try to search an element given a NULL elem_pointer.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn


@deffn Test pdf_hash_search_004
Try to search an element given a NULL key.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn


@node pdf_hash_iterator
@subsubsection pdf_hash_iterator

@deffn Test pdf_hash_iterator_001
Try to create an iterator.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_hash_iterator_002
Try to create an iterator given a NULL iterator pointer.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn

@node pdf_hash_iterator_next
@subsubsection pdf_hash_iterator_next


@deffn Test pdf_hash_iterator_next_001
Try to iterate over an iterator.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_hash_iterator_next_003
Try to iterate over an iterator given a NULL key pointer.
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn

@node pdf_hash_iterator_free
@subsubsection pdf_hash_iterator_free

@deffn Test pdf_hash_iterator_free_001
Try to free an iterator.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn


@node Error Module
@subsection Error Module

@menu
* pdf_error::
* pdf_perror::
@end menu

@node pdf_error
@subsubsection pdf_error


@deffn Test pdf_error_001
Try to trigger an error code with NULL fd.
@table @strong
@item Success condition
The program doesn't crash.
@end table
@end deffn

@deffn Test pdf_error_002
Try to trigger an error code with NULL format.
@table @strong
@item Success condition
The program doesn't crash.
@end table
@end deffn

@deffn Test pdf_error_003-018
Try to trigger an error code with valid format and fd.
@table @strong
@item Success condition
The program doesn't crash.
@end table
@end deffn

@node pdf_perror
@subsubsection pdf_perror

@deffn Test pdf_perror_001
Try to trigger an error code with NULL string.
@table @strong
@item Success condition
The program doesn't crash.
@end table
@end deffn

@deffn Test pdf_perror_002
Try to trigger an error code with valid string.
@table @strong
@item Success condition
The program doesn't crash.
@end table
@end deffn

@node Types Module
@subsection Types Module

@menu
* pdf_i64_add::
* pdf_i64_abs::
* pdf_i64_assign::
* pdf_i64_assign_quick::
* pdf_i64_cmp::
* pdf_i64_copy::
* pdf_i64_neg::
* pdf_i64_new::
* pdf_i64_div::
* pdf_i64_mult::
* pdf_i64_mod::
@end menu

@node pdf_i64_add
@subsubsection pdf_i64_add


@deffn Test pdf_i64_add_001
Checks if the carry number is properly carried.
@table @strong
@item Success condition
The call should not produce an error.
@end table
@end deffn

@deffn Test pdf_i64_add_002
Checks if function checks the proper initialisation of target
@table @strong
@item Success condition
The call should produce an error
@end table
@end deffn

@deffn Test pdf_i64_add_003
 Adds a positive and negative number
@table @strong
@item Success condition
The call should not produce an error
@end table
@end deffn

@deffn Test pdf_i64_add_004
 Adds two negative numbers
@table @strong
@item Success condition
The call should not produce an error
@end table
@end deffn

@node pdf_i64_abs
@subsubsection pdf_i64_abs

@deffn Test pdf_i64_abs_001
Checks if the result is the absolute of the number
@table @strong
@item Success condition
The call should produce a positive number from a negative
@end table
@end deffn

@deffn Test pdf_i64_abs_002
Checks if the result is the absolute of the input value
@table @strong
@item Success condition
The call should produce a positive number from a positive
@end table
@end deffn

@node pdf_i64_assign
@subsubsection pdf_i64_assign

@deffn Test pdf_i64_assign_001
Checks if the the pdf_i64_assign function properly assigns
@table @strong
@item Success condition
The call should not produce an error
@end table
@end deffn

@deffn Test pdf_i64_assign_002
Checks if the the pdf_i64_assign function properly assigns 
the high and low values to a NULL pdf_i64_t pointer type
@table @strong
@item Success condition
The call should not produce an error
@end table
@end deffn

@node pdf_i64_assign_quick
@subsubsection pdf_i64_assign_quick

@deffn Test pdf_i64_assign_quick_001
Checks if the the pdf_i64_assign function properly assigns
the high and low values to a pdf_i64_t type
@table @strong
@item Success condition
The call should not produce an error
@end table
@end deffn

@deffn Test pdf_i64_assign_quick_002
Checks if the the pdf_i64_assign function properly assigns
the high and low values to a pdf_i64_t type
@table @strong
@item Success condition
The call should not produce an error
@end table
@end deffn

@node pdf_i64_cmp
@subsubsection pdf_i64_cmp

@deffn Test pdf_i64_cmp_001
Checks if the comparison between a negative and positive
number is carried out properly
@table @strong
@item Success condition
The call should produce a -1
@end table
@end deffn

@deffn Test pdf_i64_cmp_002
Checks if the comparison between a positive and negative
number is carried out properly
@table @strong
@item Success condition
The call should produce a 1
@end table
@end deffn

@deffn Test pdf_i64_cmp_003
Checks if the comparison between two equal numbers
number is carried out properly
@table @strong
@item Success condition
The call should produce a 0
@end table
@end deffn

@node pdf_i64_copy
@subsubsection pdf_i64_copy

@deffn Test pdf_i64_copy_001
Checks if the the pdf_i64_copy copies the values of one 
pdf_i64_t variable into another
@table @strong
@item Success condition
No error is produced
@end table
@end deffn

@deffn Test pdf_i64_copy_002
Checks if the the pdf_i64_copy function gets an error if
the target pointer is not properly initialised
@table @strong
@item Success condition
Error is produced
@end table
@end deffn


@node pdf_i64_neg
@subsubsection pdf_i64_neg

@deffn Test pdf_i64_neg_001
Checks if the result is the negation of the number
@table @strong
@item Success condition
The call should produce a negative number from a positive
@end table
@end deffn

@deffn Test pdf_i64_neg_002
Checks if the result is the negation of the number
@table @strong
@item Success condition
The call should produce a positive number from a negative
@end table
@end deffn

@node pdf_i64_new
@subsubsection pdf_i64_new

@deffn Test pdf_i64_new_001
Checks if the the pdf_i64_new function properly assigns
the high and low values to a pdf_i64_t type
@table @strong
@item Success condition
Function carried out with no errors
@end table
@end deffn

@node pdf_i64_mult
@subsubsection pdf_i64_mult


@deffn Test pdf_i64_mult_001
Multiplies two positive numbers
@table @strong
@item Success condition
The call should not produce an error.
@end table
@end deffn

@deffn Test pdf_i64_mult_002
Checks if function checks the proper initialisation of target
@table @strong
@item Success condition
The call should produce an error
@end table
@end deffn

@deffn Test pdf_i64_mult_003
 Mults a positive and negative number
@table @strong
@item Success condition
The call should not produce an error
@end table
@end deffn

@deffn Test pdf_i64_mult_004
 Mults two negative numbers
@table @strong
@item Success condition
The call should not produce an error
@end table
@end deffn


@node pdf_i64_div
@subsubsection pdf_i64_div


@deffn Test pdf_i64_div_001
Divides two positive numbers
@table @strong
@item Success condition
The call should not produce an error.
@end table
@end deffn

@deffn Test pdf_i64_div_002
Checks if function checks the proper initialisation of target
@table @strong
@item Success condition
The call should produce an error
@end table
@end deffn

@deffn Test pdf_i64_div_003
 Divs a positive and negative number
@table @strong
@item Success condition
The call should not produce an error
@end table
@end deffn

@deffn Test pdf_i64_div_004
 Divs two negative numbers
@table @strong
@item Success condition
The call should not produce an error
@end table
@end deffn


@node pdf_i64_mod
@subsubsection pdf_i64_mod

@deffn Test pdf_i64_mod_001
Mods two positive numbers
@table @strong
@item Success condition
The call should not produce an error.
@end table
@end deffn

@deffn Test pdf_i64_mod_002
Checks if function checks the proper initialisation of target
@table @strong
@item Success condition
The call should produce an error
@end table
@end deffn

@deffn Test pdf_i64_mod_003
 Mods a positive and negative number
@table @strong
@item Success condition
The call should not produce an error
@end table
@end deffn

@deffn Test pdf_i64_mod_004
 Mods two negative numbers
@table @strong
@item Success condition
The call should not produce an error
@end table
@end deffn



@node Crypt Module
@subsection Crypt Module

@menu
* pdf_crypt_init::
* pdf_crypt_cipher_new::
* pdf_crypt_cipher_destroy::
* pdf_crypt_cipher_setkey::
* pdf_crypt_cipher_encrypt_size::
* pdf_crypt_cipher_decrypt_size::
* pdf_crypt_cipher_encrypt::
* pdf_crypt_cipher_decrypt::
* pdf_crypt_md_new::
* pdf_crypt_md_hash::
* pdf_crypt_md_destroy::
@end menu

@node pdf_crypt_init
@subsubsection pdf_crypt_init

@deffn Test pdf_crypt_init_001
Initialize the module.
@table @strong
@item Success condition
Returns PDF_OK.
@end table
@end deffn


@node pdf_crypt_cipher_new
@subsubsection pdf_crypt_cipher_new

@deffn Test pdf_crypt_cipher_new_001
Create an AESV2 cipher.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_crypt_cipher_new_002
Create a V2 cipher.
@table @strong
@item Success condition
Returns PDF_OK.
@end table
@end deffn


@node pdf_crypt_cipher_destroy
@subsubsection pdf_crypt_cipher_destroy

@deffn Test pdf_crypt_cipher_destroy_001
Destroy a cipher.
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn


@node pdf_crypt_cipher_encrypt_size
@subsubsection pdf_crypt_cipher_encrypt_size

@deffn Test pdf_crypt_cipher_encrypt_size_001
Get the ciphered buffer size for an empty input buffer (AESV2).
@table @strong
@item Success condition
Returns 32
@end table
@end deffn

@deffn Test pdf_crypt_cipher_encrypt_size_002
Get the ciphered buffer size for a 15 bytes buffer (AESV2).
@table @strong
@item Success condition
Returns 32
@end table
@end deffn

@deffn Test pdf_crypt_cipher_encrypt_size_003
Get the ciphered buffer size for an empty buffer (V2).
@table @strong
@item Success condition
Returns 0
@end table
@end deffn

@deffn Test pdf_crypt_cipher_encrypt_size_004
Get the ciphered buffer size for a 15 bytes buffer in a (V2).
@table @strong
@item Success condition
Returns 15
@end table
@end deffn


@node pdf_crypt_cipher_setkey
@subsubsection pdf_crypt_cipher_setkey

@deffn Test pdf_crypt_cipher_setkey_001
Try set a empty key for a cipher (AESV2).
@table @strong
@item Success condition
Returns PDF_EBADDATA
@end table
@end deffn


@deffn Test pdf_crypt_cipher_setkey_001
Set a key for a cipher (AESV2).
@table @strong
@item Success condition
Returns PDF_OK
@end table
@end deffn




@node pdf_crypt_cipher_decrypt_size
@subsubsection pdf_crypt_cipher_decrypt_size

@deffn Test pdf_crypt_cipher_decrypt_size_001
@table @strong
Get the plain buffer size for a 32 bytes ciphered buffer (AESV2).
@item Success condition
Returns 0
@end table
@end deffn

@deffn Test pdf_crypt_cipher_decrypt_size_002
@table @strong
Get the plain buffer size for a 15 bytes ciphered buffer (V2).
@item Success condition
Returns 15
@end table
@end deffn


@node pdf_crypt_cipher_encrypt
@subsubsection pdf_crypt_cipher_encrypt

@deffn Test pdf_crypt_cipher_encrypt_001
@table @strong
Encrypt an empty buffer (AESV2).
@item Success condition
Returns PDF_OK
@end table
@end deffn

@deffn Test pdf_crypt_cipher_encrypt_002
@table @strong
Encrypt an empty buffer (V2).
@item Success condition
Returns PDF_OK
@end table
@end deffn


@node pdf_crypt_cipher_decrypt
@subsubsection pdf_crypt_cipher_decrypt

@deffn Test pdf_crypt_cipher_decrypt_001
@table @strong
Decrypt an ciphered empty buffer (AESV2).
@item Success condition
Returns PDF_OK and the length of output buffer is zero.
@end table
@end deffn

@deffn Test pdf_crypt_cipher_decrypt_002
@table @strong
Decrypt an ciphered empty buffer (V2).
@item Success condition
Returns PDF_OK and the length of output buffer is zero.
@end table
@end deffn


@node pdf_crypt_md_new
@subsubsection pdf_crypt_md_new

@deffn Test pdf_crypt_md_new_001
@table @strong
Create a new message-digester.
@item Success condition
Returns PDF_OK.
@end table
@end deffn


@node pdf_crypt_md_hash
@subsubsection pdf_crypt_md_hash

@deffn Test pdf_crypt_md_hash_001
@table @strong
Compute the md5 of an empty buffer.
@item Success condition
Returns PDF_OK and output buffer matches.
@end table
@end deffn


@node pdf_crypt_md_destroy
@subsubsection pdf_crypt_md_destroy

@deffn Test pdf_crypt_md_destroy_001
@table @strong
Destroy a message-digest descriptor.
@item Success condition
Returns PDF_OK
@end table
@end deffn



@node Subsystem Testing
@chapter Subsystem Testing

@node System Testing
@chapter System Testing

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi

@node Function index
@unnumbered Function index

@printindex fn

@bye
